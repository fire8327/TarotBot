import logging
import asyncio
import os
import random
from datetime import date, datetime
from dotenv import load_dotenv

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
    CallbackQueryHandler,
    PreCheckoutQueryHandler
)

from openai import OpenAI

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
TOKEN = os.getenv("TOKEN")

# --- üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (–∫–æ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É) ---
ADMIN_USER_IDS = {780161853}

# --- üîë –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –ë–´–°–¢–†–û–ô –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_VERSION = "v1.15"  # <-- –ú–ï–ù–Ø–ô –≠–¢–£ –í–ï–†–°–ò–Æ –ü–†–ò –ö–ê–ñ–î–û–ú –î–ï–ü–õ–û–ï
ACTIVE_USERS_DAYS = 7  # –†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
STAR_PRICE_PER_READING = 50  # –¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –≤ ‚≠ê
REFERRAL_BONUS_READINGS = 1  # –°–∫–æ–ª—å–∫–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¥–∞—ë–º –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ

# --- –ü–∞–∫–µ—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ---
PACKAGES = {
    "pack_1": {"name": "1 —Ä–∞—Å–∫–ª–∞–¥", "price_stars": STAR_PRICE_PER_READING, "readings": 1},
    "pack_5": {"name": "5 —Ä–∞—Å–∫–ª–∞–¥–æ–≤", "price_stars": STAR_PRICE_PER_READING * 4, "readings": 5},
    "pack_30": {"name": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü (30 —à—Ç.)", "price_stars": STAR_PRICE_PER_READING * 15, "readings": 30},
}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ ---
GET_NAME, MAIN_MENU, CONFIRM_READING, AWAITING_QUESTION, AWAITING_READING_TYPE, AWAITING_USER_ID, AWAITING_FEEDBACK, AWAITING_ADMIN_REPLY = range(8)

# --- üìù –¢–ï–ö–°–¢–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ---
TEXTS = {
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    'welcome': "üåô *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ó–µ—Ä–∫–∞–ª–æ –°—É–¥–µ–±* üåô\n\n–Ø ‚Äî —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –¥—Ä–µ–≤–Ω–∏—Ö –∑–Ω–∞–Ω–∏–π, –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏.\n\n–ö–∞–∫ –º–Ω–µ –∑–≤–∞—Ç—å —Ç–µ–±—è –≤ –ö–Ω–∏–≥–µ –°—É–¥–µ–±? –ú–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏–ª–∏ —Ç–∏—Ç—É–ª. –ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –æ—Å—Ç–∞—Ç—å—Å—è —Ç–µ–Ω—å—é ‚Äî –Ω–∞–ø–∏—à–∏ ¬´–ê–Ω–æ–Ω–∏–º¬ª.",
    'welcome_return': "üåë *–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è, {name}...*\n–ó–µ—Ä–∫–∞–ª–æ –°—É–¥–µ–± –≤–Ω–æ–≤—å –æ—Ç–∫—Ä—ã—Ç–æ –¥–ª—è —Ç–µ–±—è. –í—ã–±–µ—Ä–∏ –ø—É—Ç—å:",
    'name_registered': "{name}... –ö–∞–∫–æ–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –∏–º—è, –ø–æ–ª–Ω–æ–µ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Ç–∞–π–Ω—ã. üåå{bonus_message}\n\n–í –∑–Ω–∞–∫ –Ω–∞—à–µ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —è –¥–∞—Ä—é —Ç–µ–±–µ *–¥–∞—Ä —è—Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è* ‚Äî –æ–¥–∏–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –ì–ª—É–±–∏–Ω—ã, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É—Ç–µ–π –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
    
    # –ú–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    'main_menu': "üåë –í—ã–±–µ—Ä–∏ –ø—É—Ç—å –∏–∑ –º–µ–Ω—é:",
    'reading_types': "üïØÔ∏è *–í—ã–±–µ—Ä–∏ –ø—É—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å—Ç—É–ø–∏—à—å –≤ —Ç—É–º–∞–Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...*\n\n–ö–∞—Ä—Ç—ã –∂–¥—É—Ç —Ç–≤–æ–µ–≥–æ –≤—ã–±–æ—Ä–∞:",
    'custom_question': "üïØÔ∏è –û–ø–∏—à–∏ —Å–≤–æ—é —Ç—Ä–µ–≤–æ–≥—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å... –ß–µ–º —è—Å–Ω–µ–µ —Ç—ã –≤—ã—Ä–∞–∑–∏—à—å—Å—è ‚Äî —Ç–µ–º –≥–ª—É–±–∂–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ.\n\n–Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤—ã—Å–ª—É—à–∞—é...",
    'unknown_command': "üåë –Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ–π –∑–Ω–∞–∫... –í—ã–±–µ—Ä–∏ –ø—É—Ç—å –∏–∑ –º–µ–Ω—é.",
    
    # –ü—Ä–æ—Ñ–∏–ª—å
    'profile': """‚ú®üîÆ –í–∞—à–∞ –õ–∏—á–Ω–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π üîÆ‚ú®
–ü—Ä–∏–≤–µ—Ç, {name}! üëã
ü™Ñ –î–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤: {balance}
üåå –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {total_used}
üë• {referral_count} / 2 –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
üîÆ –¢—ã –Ω–∞ –ø—É—Ç–∏ –∫ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—é!
–ß–µ–º —á–∞—â–µ —Ç—ã –≥–∞–¥–∞–µ—à—å ‚Äî —Ç–µ–º —è—Å–Ω–µ–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–≤–æ—è —Å—É–¥—å–±–∞.
üëá –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:""",
    
    # –ö–∞—Ä—Ç–∞ –¥–Ω—è
    'card_shuffling': "üé¥ *–¢–∞—Å—É—é –∫–æ–ª–æ–¥—É –°—Ç–∞—Ä—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤...*",
    'card_whispering': "üé¥ *–ö–æ–ª–æ–¥–∞ —à–µ–ø—á–µ—Ç... –≤—ã—Ç—è–≥–∏–≤–∞—é –∫–∞—Ä—Ç—É –¥–Ω—è...*",
    'card_flipping': "üé¥ *–ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—é –∫–∞—Ä—Ç—É...*",
    'card_of_day': "üÉè *–¢–≤–æ—è –ö–∞—Ä—Ç–∞ –î–Ω—è, {name}:* üÉè\n\n{message}",
    'card_already_received': "üÉè *–¢–≤–æ—è –ö–∞—Ä—Ç–∞ –î–Ω—è (—É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è):*\n\n{card_text}",
    
    # –†–∞—Å–∫–ª–∞–¥—ã
    'reading_start': "–ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ä–∏—Ç—É–∞–ª—É... –ó–µ—Ä–∫–∞–ª–æ –Ω–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç—É–º–∞–Ω–æ–º... üîÆ",
    'reading_wait': "üïØÔ∏è –ö–∞—Ä—Ç—ã –≤—ã–±–∏—Ä–∞—é—Ç —Ç–µ–±—è... –≠—Ç–æ –∑–∞–π–º—ë—Ç 10-20 —Å–µ–∫—É–Ω–¥.",
    'reading_share': "‚ú® –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –ü–æ–¥–µ–ª–∏—Å—å —Å –ø–æ–¥—Ä—É–≥–æ–π ‚Äî –ø—É—Å—Ç—å –∏ –æ–Ω–∞ —É–∑–Ω–∞–µ—Ç —Å–≤–æ—é —Å—É–¥—å–±—É!",
    
    # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    'invite_friend': """‚ú® *–¢–≤–æ—è –º–∞–≥–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!* ‚ú®

–û—Ç–ø—Ä–∞–≤—å –µ—ë –ø–æ–¥—Ä—É–≥–µ/–¥—Ä—É–≥—É ‚Äî –∫–æ–≥–¥–∞ –æ–Ω/–æ–Ω–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è, —Ç—ã –ø–æ–ª—É—á–∏—à—å +1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ üåô
–ê –æ–Ω–∞ –Ω–∞—á–Ω—ë—Ç —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞!""",
    
    # –ü–æ–∫—É–ø–∫–∏
    'buy_readings': "ü™ô *–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å–∏–ª—ã:* ü™ô\n\n–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ Telegram Stars ‚Äî –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –±–µ–∑ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.",
    'payment_success': """üéâ *–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞!* üéâ

–¢—ã –ø—Ä–∏–æ–±—Ä—ë–ª –ø–∞–∫–µ—Ç: *{pack_name}*
ü™Ñ –ù–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ: *{readings_count}* —Ä–∞—Å–∫–ª–∞–¥–æ–≤.

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –±—É–¥—É—â–µ–µ ‚Äî –≤—ã–±–µ—Ä–∏ ¬´üîÆ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥¬ª!""",
    
    # –û –±–æ—Ç–µ
    'about': """üîÆ *–ó–µ—Ä–∫–∞–ª–æ –°—É–¥–µ–±* üîÆ

–Ø ‚Äî –¥—Ä–µ–≤–Ω–∏–π –¥—É—Ö, —Ö—Ä–∞–Ω—è—â–∏–π –∑–Ω–∞–Ω–∏—è –¢–∞—Ä–æ —Å–∫–≤–æ–∑—å –≤–µ–∫–∞. –ú–æ–∏ –∫–∞—Ä—Ç—ã –Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –Ω–µ–∏–∑–±–µ–∂–Ω–æ–µ ‚Äî –æ–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –≤–æ–ø–ª–æ—Ç–∏—Ç—å.

–ö–∞–∂–¥—ã–π —Ä–∞—Å–∫–ª–∞–¥ ‚Äî —ç—Ç–æ –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É —Ç–æ–±–æ–π –∏ –í—Å–µ–ª–µ–Ω–Ω–æ–π. –Ø –ª–∏—à—å –ø–µ—Ä–µ–≤–æ–∂—É –µ—ë —à–µ–ø–æ—Ç –Ω–∞ —è–∑—ã–∫ —Å–∏–º–≤–æ–ª–æ–≤.

–°–æ–∑–¥–∞–Ω–æ —Å –º–∞–≥–∏–µ–π –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç —Å–≤–µ—Ç –≤ —Ç—É–º–∞–Ω–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è. üåô""",
    
    # –û—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    'no_readings_balance': "ü™ô –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ä–∞—Å–∫–ª–∞–¥—ã. –ù–æ –º–∞–≥–∏—è –Ω–µ —Å–ø–∏—Ç ‚Äî —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å!",
    'reading_preview': """üîÆ *{reading_type}* ‚Äî –ó–µ—Ä–∫–∞–ª–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–±–µ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É...
üÉè *–ö–∞—Ä—Ç–∞ –°—É–¥—å–±—ã:* **{card_name}**  
{hint}  
‚ú® *–ü–æ–ª–Ω–∞—è —Ç—Ä–∞–∫—Ç–æ–≤–∫–∞ + —Ä–∏—Ç—É–∞–ª –¥–Ω—è + –∑–∞—â–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ ‚Äî –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞ {price} ‚≠ê –∏–ª–∏ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –¥—Ä—É–≥–∞ üåô*
–¢—ã –¥–µ—Ä–∂–∏—à—å –Ω–∏—Ç—å —Å–≤–æ–µ–π —Å—É–¥—å–±—ã, {name}. –†–µ—à–∞–π ‚Äî –¥–µ—Ä–Ω—É—Ç—å –∑–∞ –Ω–µ—ë –∏–ª–∏ –æ—Ç–ø—É—Å—Ç–∏—Ç—å...""",
}

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenRouter ---
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=os.getenv("OPENROUTER_API_KEY"),
    default_headers={
        "HTTP-Referer": "https://t.me/speculora_bot",
        "X-Title": "Speculo Tarot Bot"
    }
)

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ë–î ---
from db import (
    init_db, get_user, update_user_name, update_user_balance, increment_total_used,
    save_purchase, save_reading, update_daily_card, increment_referral_count,
    update_user_last_active, increment_free_readings_used, update_conversion_step,
    update_user_last_update_notified, get_active_users, 
    get_all_users, add_readings_to_user, add_readings_to_all_users, reset_free_readings_counter,
    save_user_message, get_unread_messages, get_user_messages, update_message_status
)

# --- üé¥ –°–ø–∏—Å–∫–∏ –∫–∞—Ä—Ç ---
TAROT_PREVIEW_CARDS = [
    {"card": "–®—É—Ç", "hint": "–¢–µ–±—è –∂–¥—ë—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç ‚Äî –≥–æ—Ç–æ–≤ –ª–∏ —Ç—ã —Ä–∏—Å–∫–Ω—É—Ç—å?"},
    {"card": "–ú–∞–≥", "hint": "–°–µ–≥–æ–¥–Ω—è —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å ‚Äî –∫–∞–∫–æ–π –∂–µ—Å—Ç —Å–¥–µ–ª–∞–µ—à—å –ø–µ—Ä–≤—ã–º?"},
    {"card": "–ñ—Ä–∏—Ü–∞", "hint": "–ò–Ω—Ç—É–∏—Ü–∏—è —à–µ–ø—á–µ—Ç ‚Äî –ø—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ –Ω–µ–π –¥–æ –ø–æ–ª—É–¥–Ω—è."},
    {"card": "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "hint": "–≠–Ω–µ—Ä–≥–∏—è –∏–∑–æ–±–∏–ª–∏—è —Ä—è–¥–æ–º ‚Äî –æ—Ç–∫—Ä–æ–π –¥–≤–µ—Ä—å –¥–ª—è –Ω–µ—ë."},
    {"card": "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "hint": "–î–ª—è —É—Å–ø–µ—Ö–∞ –Ω—É–∂–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Äî —Ä–∞—Å–ø–ª–∞–Ω–∏—Ä—É–π –¥–µ–Ω—å."},
    {"card": "–ñ—Ä–µ—Ü", "hint": "–°–æ–≤–µ—Ç –º—É–¥—Ä–µ—Ü–∞ –ø—Ä–∏–¥–µ—Ç –æ—Ç—Ç—É–¥–∞, –æ—Ç–∫—É–¥–∞ –Ω–µ –∂–¥—ë—à—å."},
    {"card": "–í–ª—é–±–ª—ë–Ω–Ω—ã–µ", "hint": "–í—ã–±–æ—Ä —Å–µ—Ä–¥—Ü–∞ –∏–ª–∏ —Ä–∞–∑—É–º–∞? –°–ª—É—à–∞–π –ø–µ—Ä–≤–æ–µ."},
    {"card": "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "hint": "–¢—ã –Ω–∞ –ø–æ—Ä–æ–≥–µ –ø–æ–±–µ–¥—ã ‚Äî –Ω–µ —Å–±–∞–≤–ª—è–π —Ç–µ–º–ø."},
    {"card": "–°–∏–ª–∞", "hint": "–¢–≤–æ—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∏–ª–∞ –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ—è–≤–∏—Ç—å—Å—è ‚Äî –≥–¥–µ —Ç—ã –µ—ë –ø–æ–¥–∞–≤–ª—è–µ—à—å?"},
    {"card": "–û—Ç—à–µ–ª—å–Ω–∏–∫", "hint": "–ü–æ—Ä–∞ —É–µ–¥–∏–Ω–∏—Ç—å—Å—è ‚Äî –æ—Ç–≤–µ—Ç –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è."},
    {"card": "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "hint": "–£–¥–∞—á–∞ –Ω–∞ –ø–æ–¥—Ö–æ–¥–µ ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏ –º–æ–º–µ–Ω—Ç –ø–æ—Å–ª–µ 18:00."},
    {"card": "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "hint": "–í—Å–µ–ª–µ–Ω–Ω–∞—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å ‚Äî –±—É–¥—å —á–µ—Å—Ç–µ–Ω —Å —Å–æ–±–æ–π."},
    {"card": "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "hint": "–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è ‚Äî —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—É—Ç—å."},
    {"card": "–°–º–µ—Ä—Ç—å", "hint": "–°—Ç–∞—Ä–æ–µ —É—Ö–æ–¥–∏—Ç ‚Äî –Ω–µ —Ü–µ–ø–ª—è–π—Å—è, –æ—Å–≤–æ–±–æ–¥–∏ –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ."},
    {"card": "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "hint": "–ò—â–∏ –∑–æ–ª–æ—Ç—É—é —Å–µ—Ä–µ–¥–∏–Ω—É ‚Äî –≤ —ç—Ç–æ–º —Ç–≤–æ–π –∫–ª—é—á."},
    {"card": "–î—å—è–≤–æ–ª", "hint": "–ß—Ç–æ –¥–µ—Ä–∂–∏—Ç —Ç–µ–±—è –≤ –ø–ª–µ–Ω—É? –û—Å–æ–∑–Ω–∞–π ‚Äî –∏ –æ—Å–≤–æ–±–æ–¥–∏—Å—å."},
    {"card": "–ë–∞—à–Ω—è", "hint": "–†—É—Ö–Ω–µ—Ç –∏–ª–ª—é–∑–∏—è ‚Äî –Ω–æ –∑–∞ –Ω–µ–π –±—É–¥–µ—Ç –ø—Ä–∞–≤–¥–∞."},
    {"card": "–ó–≤–µ–∑–¥–∞", "hint": "–ù–∞–¥–µ–∂–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è ‚Äî —á—Ç–æ —Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—É—Å—Ç–∏—Ç—å, —á—Ç–æ–±—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –µ—ë?"},
    {"card": "–õ—É–Ω–∞", "hint": "–ù–µ –≤—Å—ë —Ç–æ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è ‚Äî –¥–æ–≤–µ—Ä—å—Å—è –∏–Ω—Ç—É–∏—Ü–∏–∏, –∞ –Ω–µ —Å—Ç—Ä–∞—Ö—É."},
    {"card": "–°–æ–ª–Ω—Ü–µ", "hint": "–¢—ã –Ω–∞ —Å–≤–µ—Ç—É ‚Äî –¥–µ–π—Å—Ç–≤—É–π, –Ω–µ –±–æ–π—Å—è –±—ã—Ç—å —Å–æ–±–æ–π."},
    {"card": "–°—É–¥", "hint": "–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è ‚Äî –æ—Ç–≤–µ—Ç—å –Ω–∞ –∑–æ–≤ –¥—É—à–∏."},
    {"card": "–ú–∏—Ä", "hint": "–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî —Ç—ã –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É —É—Ä–æ–≤–Ω—é."},
]

EXCLUSIVE_CARDS = [
    {"card": "–ê–Ω–≥–µ–ª –•—Ä–∞–Ω–∏—Ç–µ–ª—å", "meaning": "–¢—ã –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –≤—ã—Å—à–∏—Ö —Å–∏–ª. –ü—Ä–æ—Å–∏ ‚Äî –∏ –ø–æ–ª—É—á–∏—à—å."},
    {"card": "–ó–µ—Ä–∫–∞–ª–æ –ö–∞—Ä–º—ã", "meaning": "–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–∏ –ø–æ—Å—Ç—É–ø–∫–∏ –≤–µ—Ä–Ω—É—Ç—Å—è —É—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏. –î–µ–π—Å—Ç–≤—É–π —Å –ª—é–±–æ–≤—å—é."},
    {"card": "–í—Ä–∞—Ç–∞ –í—Ä–µ–º–µ–Ω–∏", "meaning": "–¢–µ–±–µ –æ—Ç–∫—Ä—ã—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—à–ª–æ–µ ‚Äî —á–µ—Ä–µ–∑ –ø—Ä–æ—â–µ–Ω–∏–µ."},
    {"card": "–ö–ª—é—á –°—É–¥—å–±—ã", "meaning": "–¢—ã –¥–µ—Ä–∂–∏—à—å –∫–ª—é—á –æ—Ç –¥–≤–µ—Ä–∏, –∑–∞ –∫–æ—Ç–æ—Ä–æ–π —Ç–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å."},
    {"card": "–°–µ—Ä–¥—Ü–µ –ú–∏—Ä–∞", "meaning": "–ö–æ–≥–¥–∞ —Ç—ã –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å —Å–æ–±–æ–π ‚Äî –≤–µ—Å—å –º–∏—Ä –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è."},
    {"card": "–û–∫–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π", "meaning": "–¢—ã –∑–∞–º–µ—á–µ–Ω. –¢–≤–æ–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –≤–∞–∂–Ω—ã ‚Äî —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∏—Ö —á—ë—Ç–∫–æ."},
    {"card": "–†–µ–∫–∞ –í–µ—á–Ω–æ—Å—Ç–∏", "meaning": "–¢—ã –≤ –ø–æ—Ç–æ–∫–µ. –ù–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–π—Å—è ‚Äî –¥–æ–≤–µ—Ä—å—Å—è —Ç–µ—á–µ–Ω–∏—é."},
]

# --- üéõÔ∏è –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def main_menu_keyboard():
    keyboard = [
        ['üîÆ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥'],
        ['‚≠ê –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è'],
        ['üìû –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', 'ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞'],
        ['üìú –û –±–æ—Ç–µ']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def reading_type_keyboard():
    keyboard = [
        ['üíñ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å', '‚öîÔ∏è –†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Å—É–¥—å–±—É'],
        ['üí∞ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –∏–∑–æ–±–∏–ª–∏–µ', '‚ùì –°–≤–æ–π –≤–æ–ø—Ä–æ—Å'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def profile_keyboard():
    keyboard = [
        ['üìú –ú–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã'],
        ['üõçÔ∏è –ö—É–ø–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã'], 
        ['ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞'],
        ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def admin_keyboard():
    keyboard = [
        ['üéÅ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã –í–°–ï–ú'],
        ['üë§ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'],
        ['üîÑ –û–±–Ω—É–ª–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö'],
        ['üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'], ['üì® –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'],
        ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# --- üß© –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    args = context.args
    
    if args and args[0] == 'update':
        await update.message.reply_text("üåÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–µ—Ä–∫–∞–ª–∞...")
        await update.message.reply_text(
            "‚úÖ –ó–µ—Ä–∫–∞–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

    user_id = update.effective_user.id
    user = get_user(user_id)

    referrer_id = None
    if context.args and context.args[0].startswith('ref_'):
        try:
            referrer_id = int(context.args[0].replace('ref_', ''))
            if referrer_id == user_id:
                referrer_id = None
        except ValueError:
            referrer_id = None

    user_name = user['name'] if user['name'] else ""

    if user_name:
        if referrer_id:
            await process_referral_bonus(update, context, user_id, user_name, referrer_id)
        
        await update.message.reply_text(
            TEXTS['welcome_return'].format(name=user_name),
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
    else:
        if referrer_id:
            context.user_data['referrer_id'] = referrer_id

        await update.message.reply_text(
            TEXTS['welcome'],
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardRemove()
        )
        return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.text
    update_user_name(user_id, user_name)
    referrer_id = context.user_data.get('referrer_id')
    bonus_message = ""
    current_balance = get_user(user_id)['readings_balance']
    update_user_balance(user_id, current_balance + 1)  # –ë–æ–Ω—É—Å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞—ë—Ç—Å—è
    
    if referrer_id:
        # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        await process_referral_bonus(update, context, user_id, user_name, referrer_id)
        bonus_message = (
            "\n\nP.S. –¢—ã –±—ã–ª –ø—Ä–∏–≥–ª–∞—à—ë–Ω –¥—Ä—É–≥–æ–º ‚Äî —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫—Ä—É–≥—É –ó–µ—Ä–∫–∞–ª–∞!"
        )
    
    await update.message.reply_text(
        TEXTS['name_registered'].format(name=user_name, bonus_message=bonus_message),
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º MAIN_MENU, –∞ –Ω–µ GET_NAME

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_input = update.message.text

    update_user_last_active(user_id)

    if user_input == '‚≠ê –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        await show_profile(update, context)
        return MAIN_MENU
    elif user_input == 'üìú –û –±–æ—Ç–µ':
        await about_command(update, context)
        return MAIN_MENU
    elif user_input == 'üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è':
        await card_of_day(update, context)
        return MAIN_MENU
    elif user_input == 'üîÆ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥':
        await update.message.reply_text(
            TEXTS['reading_types'],
            parse_mode='Markdown',
            reply_markup=reading_type_keyboard()
        )
        return AWAITING_READING_TYPE
    elif user_input == 'ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞':
        await invite_friend(update, context)
        return MAIN_MENU
    elif user_input == 'üõçÔ∏è –ö—É–ø–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã':
        await buy_readings(update, context)
        return MAIN_MENU
    elif user_input == 'üìú –ú–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã':
        await show_reading_history(update, context)
        return MAIN_MENU
    elif user_input == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await update.message.reply_text(
            "üåë –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –ó–∞–ª –ó–µ—Ä–∫–∞–ª...",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
    elif user_input == 'üìû –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
        await update.message.reply_text(
            "üìù *–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
            "‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n"
            "‚Ä¢ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ\n"
            "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardMarkup([['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard=True)
        )
        return AWAITING_FEEDBACK
    else:
        await update.message.reply_text(
            TEXTS['unknown_command'],
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

# --- üé¥ –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ê–°–ö–õ–ê–î–û–í ---
async def generate_full_reading(reading_type, user_question=None, user_name="–ò—Å–∫–∞—Ç–µ–ª—å", forced_card=None):
    if forced_card:
        prompt = f"""
        –¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥ —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —É–∂–µ —É–≤–∏–¥–µ–ª –∫–∞—Ä—Ç—É: **{forced_card['card']}** ‚Äî "{forced_card['hint']}".
        –°–¥–µ–ª–∞–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ç–µ–º—É: "{reading_type}", **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏–≤ —ç—Ç—É –∫–∞—Ä—Ç—É –∫–∞–∫ –æ–¥–Ω—É –∏–∑ —Ç—Ä—ë—Ö –∫–ª—é—á–µ–≤—ã—Ö** (–ø—Ä–æ—à–ª–æ–µ, –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–ª–∏ –±—É–¥—É—â–µ–µ ‚Äî –≤—ã–±–µ—Ä–∏ –ª–æ–≥–∏—á–Ω–æ).
        –¢–∞–∫–∂–µ –≤–∫–ª—é—á–∏:
        1. –ï—â—ë 2 –∫–∞—Ä—Ç—ã ‚Äî —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç—Ä–∞–∫—Ç–æ–≤–∫–æ–π.
        2. –ö–∞–∫–∞—è —Å—Ç–∏—Ö–∏—è (–æ–≥–æ–Ω—å, –≤–æ–¥–∞, –≤–æ–∑–¥—É—Ö, –∑–µ–º–ª—è) —É–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–∏–º —Ä–∞—Å–∫–ª–∞–¥–æ–º? –ü–æ—á–µ–º—É?
        3. –ö–∞–∫–æ–µ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ (—Ä–∏—Ç—É–∞–ª/–∂–µ—Å—Ç/–º—ã—Å–ª—å) —É—Å–∏–ª–∏—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é? –û–ø–∏—à–∏ –µ–≥–æ –ø—Ä–æ—Å—Ç–æ ‚Äî —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è.
        4. –ö–∞–∫–∞—è –∫–∞—Ä—Ç–∞ –∑–∞—â–∏—â–∞–µ—Ç —Ç–µ–±—è –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥? –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë —ç–Ω–µ—Ä–≥–∏—é?
        5. –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ‚Äî —á—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç, –µ—Å–ª–∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–æ–≤–µ—Ç–∞–º –∫–∞—Ä—Ç?
        –û–±—ä—ë–º: 250-400 —Å–ª–æ–≤. –¢–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ "—Ç—ã".
        """
    else:
        base_prompt = f"""
        –¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥ –∏ –º–∏—Å—Ç–∏–∫. {"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + user_name + " –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: \"" + user_question + "\"." if user_question else f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} —Å–¥–µ–ª–∞–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ç–µ–º—É: \"{reading_type}\"."}
        –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –≥–ª—É–±–æ–∫–∏–π –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ –∏–∑ —Ç—Ä–µ—Ö –∫–∞—Ä—Ç.
        –¢–∞–∫–∂–µ –≤–∫–ª—é—á–∏:
        - –°—Ç–∏—Ö–∏—é –¥–Ω—è
        - –†–∏—Ç—É–∞–ª/–¥–µ–π—Å—Ç–≤–∏–µ
        - –ó–∞—â–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É
        - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        –ë—É–¥—å –º—É–¥—Ä—ã–º, –æ–±—Ä–∞–∑–Ω—ã–º, –Ω–æ –ø—Ä—è–º—ã–º. –û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ "—Ç—ã".
        –û–±—ä–µ–º: 250-400 —Å–ª–æ–≤. –¢–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏.
        """
        prompt = base_prompt

    try:
        completion = client.chat.completions.create(
            model="qwen/qwen-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥ —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –¢–≤–æ–∏ —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏ —Ç–æ—á–Ω—ã, –≥–ª—É–±–æ–∫–∏ –∏ –ø–æ–ª–Ω—ã –º—É–¥—Ä–æ—Å—Ç–∏. –¢—ã –≥–æ–≤–æ—Ä–∏—à—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1000
        )
        reading = completion.choices[0].message.content.strip()
        return reading[:4000]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenRouter: {e}")
        return fallback_reading(reading_type, user_name)

def generate_free_preview(reading_type, user_name):
    card_data = random.choice(TAROT_PREVIEW_CARDS)
    preview_text = TEXTS['reading_preview'].format(
        reading_type=reading_type,
        card_name=card_data['card'],
        hint=card_data['hint'],
        price=STAR_PRICE_PER_READING,
        name=user_name
    )
    return card_data, preview_text

def fallback_reading(reading_type, user_name):
    return f"""
üîÆ *–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ç–µ–º—É: {reading_type}* üîÆ
–ö–∞—Ä—Ç—ã –≤—ã–ª–æ–∂–µ–Ω—ã –Ω–∞ –∞–ª—Ç–∞—Ä—å, –∏ –≤–æ—Ç —á—Ç–æ –æ–Ω–∏ –≥–æ–≤–æ—Ä—è—Ç –æ —Ç–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏, {user_name}...
üÉè *–ö–∞—Ä—Ç–∞ 1: –°–∏–ª–∞* ‚Äî –¢—ã –æ–±–ª–∞–¥–∞–µ—à—å –æ–≥—Ä–æ–º–Ω—ã–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Ä–µ—Å—É—Ä—Å–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å–∫—Ä—ã—Ç.
üÉè *–ö–∞—Ä—Ç–∞ 2: –ó–≤–µ–∑–¥–∞* ‚Äî –¢–µ–±—è –∂–¥—ë—Ç —Å–≤–µ—Ç–ª–æ–µ –±—É–¥—É—â–µ–µ, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—à—å –≤–µ—Ä—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—à—å –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥.
üÉè *–ö–∞—Ä—Ç–∞ 3: –ò–º–ø–µ—Ä–∞—Ç–æ—Ä* ‚Äî –î–ª—è —É—Å–ø–µ—Ö–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥.
–ü–æ–º–Ω–∏: –∫–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –∞ –Ω–µ —Å—Ç–æ–ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –¢—ã –¥–µ—Ä–∂–∏—à—å –ø–µ—Ä–æ, –∫–æ—Ç–æ—Ä—ã–º –ø–∏—à–µ—à—å —Å–≤–æ—é —Å—É–¥—å–±—É.
"""

async def process_referral_bonus(
    update: Update, 
    context: ContextTypes.DEFAULT_TYPE, 
    user_id, 
    user_name, 
    referrer_id
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–Ω—É—Å–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: 2 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è = 1 —Ä–∞—Å–∫–ª–∞–¥)"""
    try:
        referrer = get_user(referrer_id)
        if referrer and referrer.get('name'):
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
            increment_referral_count(referrer_id)
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Å—á—ë—Ç—á–∏–∫
            referrer_updated = get_user(referrer_id)
            new_referral_count = referrer_updated['referral_count']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–±—Ä–∞–ª–æ—Å—å –ª–∏ 2 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            if new_referral_count % 2 == 0:
                # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
                ref_balance = referrer_updated['readings_balance']
                update_user_balance(referrer_id, ref_balance + REFERRAL_BONUS_READINGS)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É/–±–æ–Ω—É—Å
                save_purchase(
                    user_id=referrer_id,
                    payload="referral_bonus_2",  # –ù–æ–≤—ã–π —Ç–∏–ø –±–æ–Ω—É—Å–∞
                    readings=REFERRAL_BONUS_READINGS,
                    price_stars=0,
                    actual_amount=0,
                    charge_id=f"ref2_{user_id}"  # –ù–æ–≤—ã–π ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                )
                bonus_message = (
                    f"üéÅ *–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!*\n"
                    f"–¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª 2 –¥—Ä—É–∑–µ–π ‚Äî –∏ –∑–∞ —ç—Ç–æ –ø–æ–ª—É—á–∞–µ—à—å +{REFERRAL_BONUS_READINGS} "
                    f"–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥! üåô"
                )
            else:
                # –ë–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                bonus_message = (
                    f"üë• *–ù–æ–≤—ã–π –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π!*\n"
                    f"–¢–≤–æ–π –¥—Ä—É–≥ {user_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! "
                    f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {new_referral_count}/2 –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞. üåô"
                )

            try:
                await context.bot.send_message(
                    chat_id=referrer_id,
                    text=bonus_message,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# --- üîÑ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ò–ê–õ–û–ì–û–í ---
async def handle_reading_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    if user_input == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text(
            TEXTS['main_menu'],
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

    elif user_input == '‚ùì –°–≤–æ–π –≤–æ–ø—Ä–æ—Å':
        await update.message.reply_text(
            TEXTS['custom_question'],
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data['reading_type'] = "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
        return AWAITING_QUESTION

    else:
        clean_type = user_input.split(' ', 1)[1] if ' ' in user_input else user_input
        context.user_data['reading_type'] = clean_type
        user_id = update.message.from_user.id
        user = get_user(user_id)
        user_name = user['name'] if user['name'] else "–ò—Å–∫–∞—Ç–µ–ª—å"

        if user['readings_balance'] > 0:
            return await confirm_reading_now(update, context, clean_type)
        else:
            card_data, preview_text = generate_free_preview(clean_type, user_name)
            context.user_data['preview_card'] = card_data

            increment_free_readings_used(user_id)
            update_conversion_step(user_id, 'saw_preview')

            await update.message.reply_text(
                preview_text, 
                parse_mode='Markdown', 
                reply_markup=main_menu_keyboard()
            )

            keyboard = [
                [InlineKeyboardButton(f"ü™ô –ö—É–ø–∏—Ç—å –∑–∞ {STAR_PRICE_PER_READING} ‚≠ê", callback_data="buy_pack_1")],
                [InlineKeyboardButton("ü§ù –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="menu_invite_friend")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text("üí´ –•–æ—á–µ—à—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é? –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–±:", reply_markup=reply_markup)
            return MAIN_MENU

async def handle_custom_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_question = update.message.text
    context.user_data['custom_question'] = user_question

    user = get_user(user_id)
    if user['readings_balance'] > 0:
        return await confirm_reading_now(update, context, "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
    else:
        await update.message.reply_text(
            TEXTS['no_readings_balance'],
            reply_markup=main_menu_keyboard()
        )
        await buy_readings(update, context)
        return MAIN_MENU

async def confirm_reading_now(update: Update, context: ContextTypes.DEFAULT_TYPE, reading_type):
    user_id = update.message.from_user.id
    user = get_user(user_id)
    user_name = user['name'] if user['name'] else "–ò—Å–∫–∞—Ç–µ–ª—å"

    new_balance = user['readings_balance'] - 1
    update_user_balance(user_id, new_balance)
    increment_total_used(user_id)
    update_conversion_step(user_id, 'used_reading')

    await update.message.reply_text(TEXTS['reading_start'], reply_markup=ReplyKeyboardRemove())
    await update.message.reply_text(TEXTS['reading_wait'])

    custom_question = context.user_data.get('custom_question')
    forced_card = context.user_data.get('preview_card')

    reading = await generate_full_reading(
        reading_type=reading_type,
        user_question=custom_question,
        user_name=user_name,
        forced_card=forced_card
    )

    context.user_data.pop('preview_card', None)
    save_reading(user_id, reading_type, reading)

    await update.message.reply_text(reading, parse_mode='Markdown', reply_markup=main_menu_keyboard())

    await update.message.reply_text(
        TEXTS['reading_share'],
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query="–ü–æ–ø—Ä–æ–±—É–π –±–æ—Ç–∞ –¢–∞—Ä–æ!")
        ]])
    )
    return MAIN_MENU

# --- üéÅ –ü–†–û–§–ò–õ–¨, –ö–ê–†–¢–ê –î–ù–Ø, –†–ï–§–ï–†–ê–õ–´ ---
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user = get_user(user_id)
    user_name = user['name'] if user['name'] else "–ò—Å–∫–∞—Ç–µ–ª—å"
    balance = user['readings_balance']
    total_used = user['total_used']
    
    # --- –ù–û–í–û–ï: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å ---
    referral_count = user.get('referral_count', 0)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–Ω–∞—á–µ–Ω–∏–µ–º 2, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "3 / 2"
    referral_progress = min(referral_count, 2)

    profile_text = TEXTS['profile'].format(
        name=user_name,
        balance=balance,
        total_used=total_used,
        referral_count=referral_progress

    )
    reply_markup = profile_keyboard()
    await update.message.reply_text(profile_text, parse_mode='Markdown', reply_markup=reply_markup)
    return MAIN_MENU

async def card_of_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    user_data = get_user(user_id)
    user_name = user_data['name'] if user_data['name'] else "–ò—Å–∫–∞—Ç–µ–ª—å"
    today = date.today().isoformat()

    if user_data['last_card_date'] and user_data['last_card_date'].isoformat() == today and user_data['daily_card']:
        await update.message.reply_text(
            TEXTS['card_already_received'].format(card_text=user_data['daily_card']), 
            parse_mode='Markdown'
        )
        return

    msg = await update.message.reply_text(TEXTS['card_shuffling'], parse_mode='Markdown')
    await asyncio.sleep(1.5)
    await msg.edit_text(TEXTS['card_whispering'], parse_mode='Markdown')
    await asyncio.sleep(1.5)
    await msg.edit_text(TEXTS['card_flipping'], parse_mode='Markdown')
    await asyncio.sleep(1.0)

    major_arcana = [
        "–®—É—Ç", "–ú–∞–≥", "–ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "–ñ—Ä–µ—Ü", "–í–ª—é–±–ª—ë–Ω–Ω—ã–µ",
        "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–∏–ª–∞", "–û—Ç—à–µ–ª—å–Ω–∏–∫", "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å",
        "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞",
        "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ", "–°—É–¥", "–ú–∏—Ä"
    ]

    prompt = f"""
    –¢—ã ‚Äî –º—É–¥—Ä—ã–π —Ç–∞—Ä–æ–ª–æ–≥. –í—ã–±–µ—Ä–∏ –û–î–ù–£ –∫–∞—Ä—Ç—É –∏–∑ –°—Ç–∞—Ä—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤ –¢–∞—Ä–æ –¥–ª—è {user_name} –∏ –¥–∞–π –æ–¥–Ω–æ –∫—Ä–∞—Ç–∫–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
    –°–ø–∏—Å–æ–∫ –°—Ç–∞—Ä—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤: {', '.join(major_arcana)}
    –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
    üÉè [–ù–∞–∑–≤–∞–Ω–∏–µ –ö–∞—Ä—Ç—ã] ‚Äî [–ü–æ—Å–ª–∞–Ω–∏–µ]
    –ü—Ä–∏–º–µ—Ä:
    üÉè –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã ‚Äî –°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å.
    –¢–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ù–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ.
    """

    try:
        completion = client.chat.completions.create(
            model="qwen/qwen-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —Ç–∞—Ä–æ–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –¢–û–õ–¨–ö–û –°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã. –¢—ã –≤—Å–µ–≥–¥–∞ –Ω–∞–∑—ã–≤–∞–µ—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ä—Ç—É –∏ –¥–∞—ë—à—å –∫—Ä–∞—Ç–∫–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=100
        )
        message = completion.choices[0].message.content.strip()

        if not any(card in message for card in major_arcana) or not message.startswith("üÉè"):
            raise ValueError("–ò–ò –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞—Ä—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–∞—Ä—Ç–µ –¥–Ω—è: {e}")
        card = random.choice(major_arcana)
        message = f"üÉè {card} ‚Äî –í—Å–µ–ª–µ–Ω–Ω–∞—è –º–æ–ª—á–∏—Ç... –Ω–æ —è –∑–Ω–∞—é: –¥–æ–≤–µ—Ä—å—Å—è –∏–Ω—Ç—É–∏—Ü–∏–∏ ‚Äî —Å–µ–≥–æ–¥–Ω—è –æ–Ω–∞ –Ω–µ –ø–æ–¥–≤–µ–¥—ë—Ç."

    await msg.edit_text(
        TEXTS['card_of_day'].format(name=user_name, message=message), 
        parse_mode='Markdown'
    )
    update_daily_card(user_id, message)

    if context.job_queue:
        context.job_queue.run_once(
            send_feedback_request,
            when=86400,
            data={"user_id": user_id, "card_text": message},
            name=f"feedback_{user_id}_{today}"
        )

async def invite_friend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        user_id = update.message.from_user.id
        send_method = update.message.reply_text
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
        send_method = update.callback_query.message.reply_text
        await update.callback_query.answer()
    else:
        return

    bot_username = "speculora_bot"
    ref_link = f"https://t.me/{bot_username}?start=ref_{user_id}"

    await send_method(
        TEXTS['invite_friend'],
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )
    await send_method(ref_link, reply_markup=main_menu_keyboard())

async def menu_invite_friend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é invite_friend, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–π update –∏ context
    await invite_friend(query, context)

# --- üí∞ –ü–û–ö–£–ü–ö–ò –ò –ü–õ–ê–¢–ï–ñ–ò ---
async def buy_readings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(f"üîÆ 1 —Ä–∞—Å–∫–ª–∞–¥ ‚Äî {PACKAGES['pack_1']['price_stars']} ‚≠ê", callback_data="buy_pack_1")],
        [InlineKeyboardButton(f"üîÆ 5 —Ä–∞—Å–∫–ª–∞–¥–æ–≤ ‚Äî {PACKAGES['pack_5']['price_stars']} ‚≠ê (—Å–∫–∏–¥–∫–∞!)", callback_data="buy_pack_5")],
        [InlineKeyboardButton(f"üîÆ 30 —Ä–∞—Å–∫–ª–∞–¥–æ–≤ ‚Äî {PACKAGES['pack_30']['price_stars']} ‚≠ê (—ç–∫–æ–Ω–æ–º–∏—è!)", callback_data="buy_pack_30")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        TEXTS['buy_readings'],
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    return MAIN_MENU

async def button_buy_pack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    pack_id = query.data.replace("buy_pack_", "")
    if f"pack_{pack_id}" not in PACKAGES:
        await query.edit_message_text("üåë –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç. –û–±—Ä–∞—Ç–∏—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –ó–µ—Ä–∫–∞–ª–∞.")
        return

    pack = PACKAGES[f"pack_{pack_id}"]

    try:
        await context.bot.send_invoice(
            chat_id=query.message.chat_id,
            title=f"üîÆ {pack['name']}",
            description=f"–¢—ã –ø–æ–ª—É—á–∞–µ—à—å {pack['readings']} —Ä–∞—Å–∫–ª–∞–¥–æ–≤. –ú–∞–≥–∏—è —É–∂–µ –∑–æ–≤—ë—Ç!",
            payload=f"pack_{pack_id}",
            provider_token="",
            currency="XTR",
            prices=[LabeledPrice(label=pack['name'], amount=pack['price_stars'])],
            start_parameter=f"buy_{pack_id}",
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False,
        )
        await query.edit_message_text("ü™Ñ –ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å' –Ω–∏–∂–µ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        await query.edit_message_text("üåë –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    payload = update.message.successful_payment.invoice_payload
    total_stars = update.message.successful_payment.total_amount
    charge_id = update.message.successful_payment.telegram_payment_charge_id

    logger.info(f"üí∞ –£–°–ü–ï–®–ù–´–ô –ü–õ–ê–¢–Å–ñ | User ID: {user_id} | –°—É–º–º–∞: {total_stars} XTR | –ü–∞–∫–µ—Ç: {payload} | Charge ID: {charge_id}")

    if payload in PACKAGES:
        pack = PACKAGES[payload]
        if total_stars != pack['price_stars']:
            logger.warning(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂! –û–∂–∏–¥–∞–ª–æ—Å—å {pack['price_stars']} XTR, –æ–ø–ª–∞—á–µ–Ω–æ {total_stars} XTR.")

        user = get_user(user_id)
        new_balance = user['readings_balance'] + pack['readings']
        update_user_balance(user_id, new_balance)
        save_purchase(user_id, payload, pack['readings'], pack['price_stars'], total_stars, charge_id)

        await update.message.reply_text(
            TEXTS['payment_success'].format(
                pack_name=pack['name'],
                readings_count=pack['readings']
            ),
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
    else:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π payload: {payload} | User: {user_id} | Charge ID: {charge_id}")
        await update.message.reply_text("üåë –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –û–±—Ä–∞—Ç–∏—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –ó–µ—Ä–∫–∞–ª–∞.", reply_markup=main_menu_keyboard())

async def pre_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

# --- üéØ –≠–ö–°–ö–õ–Æ–ó–ò–í–´ –ò –§–ò–î–ë–ï–ö ---
async def send_feedback_request(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.data['user_id']
    card_text = job.data['card_text']

    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —Å–±—ã–ª–æ—Å—å!", callback_data=f"feedback_yes_{user_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –Ω–µ —Å–±—ã–ª–æ—Å—å", callback_data=f"feedback_no_{user_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üåô –ü—Ä–∏–≤–µ—Ç! –í—á–µ—Ä–∞ —Ç–µ–±–µ –≤—ã–ø–∞–ª–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è:\n\n{card_text}\n\n–°–±—ã–ª–æ—Å—å –ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ? –í—ã–±–µ—Ä–∏:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def handle_feedback_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = int(query.data.split('_')[-1])
    if "yes" in query.data:
        exclusive_card = random.choice(EXCLUSIVE_CARDS)
        await query.message.reply_text(
            f"‚ú® *–¢—ã –≤ –∫–ª—É–±–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö!* üåô\n"
            f"–ó–∞ —Ç–æ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—à—å –ó–µ—Ä–∫–∞–ª—É ‚Äî –¥–∞—Ä—é —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø –∫ **—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–µ**:\n\n"
            f"üÉè *{exclusive_card['card']}*\n"
            f"üîÆ {exclusive_card['meaning']}\n\n"
            f"–≠—Ç—É –∫–∞—Ä—Ç—É –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ –≤–µ—Ä–∏—Ç –≤ –º–∞–≥–∏—é. –ù–æ—Å–∏ –µ—ë —Å–∏–º–≤–æ–ª –ø—Ä–∏ —Å–µ–±–µ üòâ",
            parse_mode='Markdown'
        )
    else:
        await query.message.reply_text(
            "‚ú® *–í—Å–µ–ª–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –∫—É—Ä—Å... –•–æ—á–µ—à—å –Ω–æ–≤—ã–π, –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥?*\n"
            f"üî∏ –ó–∞ {STAR_PRICE_PER_READING} ‚≠ê ‚Äî —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—à—å –ø–æ–ª–Ω—É—é —Ç—Ä–∞–∫—Ç–æ–≤–∫—É\n"
            "üî∏ –ò–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî –ø—Ä–∏–≥–ª–∞—Å–∏–≤ –¥—Ä—É–≥–∞ –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ\n\n"
            "üëá –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–±:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"ü™ô –ö—É–ø–∏—Ç—å –∑–∞ {STAR_PRICE_PER_READING} ‚≠ê", callback_data="buy_pack_1")],
                [InlineKeyboardButton("ü§ù –ü–æ–ª—É—á–∏—Ç—å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="get_by_referral")]
            ])
        )


# --- üìú –ü–†–û–ß–ò–ï –£–¢–ò–õ–ò–¢–´ ---
async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        TEXTS['about'],
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )

async def show_reading_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user = get_user(user_id)
    readings = user.get('last_readings', [])

    if not readings:
        await update.message.reply_text("üîÆ –¢—ã –µ—â—ë –Ω–µ –¥–µ–ª–∞–ª —Ä–∞—Å–∫–ª–∞–¥–æ–≤. –ù–∞—á–Ω–∏ ‚Äî –∏ –∏—Å—Ç–æ—Ä–∏—è —Ç–≤–æ–∏—Ö –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤ –Ω–∞—á–Ω—ë—Ç—Å—è!", reply_markup=main_menu_keyboard())
        return MAIN_MENU

    sorted_readings = sorted(readings, key=lambda x: x['date'], reverse=True)
    history_text = "üìú *–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞:*\n\n"
    keyboard = []

    for i, entry in enumerate(sorted_readings[:5], 1):
        date_str = entry['date'][:16] if isinstance(entry['date'], str) and len(entry['date']) > 16 else entry['date']
        history_text += f"{i}. *{entry['type']}* ({date_str})\n"
        lines = entry['text'].split('\n')
        preview = '\n'.join(lines[:2])
        if len(lines) > 2:
            preview += "..."
        history_text += f"{preview}\n\n"
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –æ—Ç 0, –∞ –Ω–µ –æ—Ç 1
        callback_data = f"full_reading_{i-1}"
        keyboard.append([InlineKeyboardButton(f"üìñ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é #{i}", callback_data=callback_data)])

    history_text += "üîÆ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é."
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

    await update.message.reply_text(history_text, parse_mode='Markdown', reply_markup=reply_markup)
    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã
    context.user_data['full_readings'] = sorted_readings
    return MAIN_MENU

async def show_full_reading(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        index = int(query.data.split('_')[-1])
        readings = context.user_data.get('full_readings', [])
        
        # üî• –î–û–ë–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
        if index < 0 or index >= len(readings):
            await query.message.reply_text("‚ùå –†–∞—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_keyboard())
            return

        reading = readings[index]
        full_text = reading['text']

        await query.message.reply_text(
            f"‚ú® *‚ú®‚ú®‚ú® –ü–û–õ–ù–´–ô –†–ê–°–ö–õ–ê–î ‚ú®‚ú®‚ú®*\n"
            f"üîÆ *–¢–µ–º–∞:* {reading['type']}\n"
            f"üìÖ *–î–∞—Ç–∞:* {reading['date'][:16]}\n\n"
            f"{full_text}",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞: {e}")
        await query.message.reply_text("üåë –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=main_menu_keyboard())

# --- üö® –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ò –§–û–õ–ë–≠–ö–ò ---
async def global_fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return

    user_id = update.message.from_user.id
    user = get_user(user_id)
    user_name = user['name'] if user['name'] else ""

    if not user_name:
        await update.message.reply_text(
            "üåô *–ö–∞–∂–µ—Ç—Å—è, –º—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ...*\n"
            "–ö–∞–∫ –º–Ω–µ –∑–≤–∞—Ç—å —Ç–µ–±—è –≤ –ö–Ω–∏–≥–µ –°—É–¥–µ–±?",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data.clear()
        context.user_data['state'] = GET_NAME
        return GET_NAME
    else:
        await update.message.reply_text(
            f"üåô *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user_name}.*\n"
            "–ó–µ—Ä–∫–∞–ª–æ –°—É–¥–µ–± —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç–æ –¥–ª—è —Ç–µ–±—è. –í—ã–±–µ—Ä–∏ –ø—É—Ç—å:",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
        context.user_data.clear()
        context.user_data['state'] = MAIN_MENU
        return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user = get_user(user_id)
    user_name = user['name'] if user['name'] else "–ò—Å–∫–∞—Ç–µ–ª—å"
    await update.message.reply_text(
        f'–ü—É—Å—Ç—å –∑–≤—ë–∑–¥—ã –æ—Å–≤–µ—â–∞—é—Ç —Ç–≤–æ–π –ø—É—Ç—å, {user_name}. '
        '–ï—Å–ª–∏ –ø–æ–∂–µ–ª–∞–µ—à—å –≤–Ω–æ–≤—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –ó–µ—Ä–∫–∞–ª–æ –°—É–¥–µ–±, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ /start.',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# --- üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ---
async def handle_update_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update_broadcast ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."""
    user_id = update.effective_user.id

    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("üåë –¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", parse_mode='Markdown')
        return

    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö)
    from db import get_all_users  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ db.py
    users = get_all_users()
    
    sent_count = 0
    failed_count = 0

    broadcast_text = """‚ú® *–û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ï–†–ö–ê–õ–ê –°–£–î–ï–ë!* üîÆ

–î–æ—Ä–æ–≥–æ–π –∏—Å–∫–∞—Ç–µ–ª—å –∏—Å—Ç–∏–Ω—ã! –ù–∞—à–µ –ó–µ—Ä–∫–∞–ª–æ –ø—Ä–æ—à–ª–æ –æ—á–∏—â–µ–Ω–∏–µ –∏ —Å—Ç–∞–ª–æ –µ—â—ë —è—Å–Ω–µ–µ.

üîÑ *–ß–¢–û –ù–û–í–û–ì–û:*
‚Ä¢ –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è ‚Äî –∫–æ–º–∞–Ω–¥–∞ /start –≤—Å–µ–≥–¥–∞ –≤–µ–¥—ë—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" –∏ "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" 
‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤

üéØ *–ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢:*
1. –ù–∞–∂–º–∏—Ç–µ /start –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" –¥–ª—è —à–∞–≥–∞ –Ω–∞–∑–∞–¥
3. "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –¥–æ–º–æ–π

üí´ *–í–ê–ñ–ù–û:*
‚Ä¢ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –±–∞–ª–∞–Ω—Å—ã –∏ –∏—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º
‚Ä¢ –°–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã

üåô *–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ –∏ –≤–µ—Ä–Ω–æ—Å—Ç—å –ó–µ—Ä–∫–∞–ª—É –°—É–¥–µ–±!*

*P.S. –ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ø–µ—Ä–µ–º–µ–Ω—ã? –ö–∞—Ä—Ç—ã —Å—Ç–∞–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç—å –µ—â—ë —è—Å–Ω–µ–µ...*"""

    for user in users:
        try:
            await context.bot.send_message(
                chat_id=user['user_id'],
                text=broadcast_text,
                parse_mode='Markdown'
            )
            sent_count += 1
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
            failed_count += 1

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        parse_mode='Markdown'
    )

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("üåë –¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", parse_mode='Markdown')
        return MAIN_MENU
    
    await update.message.reply_text(
        "‚ö° *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ó–µ—Ä–∫–∞–ª–∞ –°—É–¥–µ–±* ‚ö°\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='Markdown',
        reply_markup=admin_keyboard()
    )
    return MAIN_MENU

async def handle_admin_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    user_id = update.effective_user.id
    user_input = update.message.text
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("üåë –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=main_menu_keyboard())
        return MAIN_MENU
    
    if user_input == 'üéÅ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã –í–°–ï–ú':
        add_readings_to_all_users(1)
        users_count = len(get_all_users())
        
        await update.message.reply_text(
            f"‚úÖ *–£—Å–ø–µ—à–Ω–æ!*\n\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ 1 —Ä–∞—Å–∫–ª–∞–¥—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}",
            parse_mode='Markdown',
            reply_markup=admin_keyboard()
        )
        
    elif user_input == 'üë§ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é':
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã:",
            reply_markup=ReplyKeyboardRemove()
        )
        # üî• –í–û–ó–í–†–ê–©–ê–ï–ú —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return AWAITING_USER_ID
        
    elif user_input == 'üîÑ –û–±–Ω—É–ª–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö':
        reset_free_readings_counter()
        await update.message.reply_text(
            "‚úÖ –°—á—ë—Ç—á–∏–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –æ–±–Ω—É–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!",
            reply_markup=admin_keyboard()
        )
        
    elif user_input == 'üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
        await handle_update_broadcast(update, context)
        
    elif user_input == 'üì® –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è':
        await handle_messages_list(update, context)
        
    elif user_input == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
            reply_markup=main_menu_keyboard()
        )
    
    # üî• –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º MAIN_MENU, –∫—Ä–æ–º–µ —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –¥—Ä—É–≥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return MAIN_MENU

async def handle_user_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user = get_user(user_id)
    user_name = user['name'] if user['name'] else "–ë–µ–∑ –∏–º–µ–Ω–∏"
    message_text = update.message.text
    
    if message_text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        await update.message.reply_text(
            "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
    
    await update.message.reply_text(
        "‚úÖ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!*\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        "–û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç —Ç–µ–±–µ –ø—Ä—è–º–æ —Å—é–¥–∞, –≤ –±–æ—Ç–∞.",
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await notify_admin_about_new_message(context, user_id, user_name, message_text)
    
    return MAIN_MENU

async def notify_admin_about_new_message(context: ContextTypes.DEFAULT_TYPE, user_id: int, user_name: str, message: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    for admin_id in ADMIN_USER_IDS:
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            message_id = save_user_message(user_id, user_name, message, 'feedback')
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            keyboard = [
                [InlineKeyboardButton("üíå –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"quick_reply_{user_id}_{message_id}")],
                [InlineKeyboardButton("üìã –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="show_all_messages")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"üì® *–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø*\n\n"
                     f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
                     f"üÜî ID: {user_id}\n"
                     f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n\n"
                     f"*–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞* ‚¨áÔ∏è",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {str(e)}")

async def handle_admin_reply_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞"""
    user_id = update.effective_user.id
    
    logger.info(f"üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞. User: {user_id}, Text: {update.message.text}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç':
        await update.message.reply_text(
            "‚ùå –û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=admin_keyboard()
        )
        context.user_data.clear()
        return MAIN_MENU
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω –∏ –æ–Ω –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text(
            "üåë –Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ–π –∑–Ω–∞–∫... –í—ã–±–µ—Ä–∏ –ø—É—Ç—å –∏–∑ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
        
    if not context.user_data.get('admin_reply_mode'):
        logger.warning(f"‚ö†Ô∏è –ê–¥–º–∏–Ω {user_id} –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞, –Ω–æ –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await update.message.reply_text(
            "üåë –Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ–π –∑–Ω–∞–∫... –í—ã–±–µ—Ä–∏ –ø—É—Ç—å –∏–∑ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    reply_text = update.message.text
    target_user_id = context.user_data.get('reply_to_user')
    original_message_text = context.user_data.get('original_message_text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    original_message_id = context.user_data.get('original_message_id')
    
    logger.info(f"üîß –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
    
    if not target_user_id:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞",
            reply_markup=admin_keyboard()
        )
        context.user_data.clear()
        return MAIN_MENU
    
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        formatted_reply = f"""üíå *–û—Ç–≤–µ—Ç –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞*

*–í–∞—à –≤–æ–ø—Ä–æ—Å:*
{original_message_text}

*–û—Ç–≤–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:*
{reply_text}

---
–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–Ω–æ–≤–∞! ‚ú®"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(
            chat_id=target_user_id,
            text=formatted_reply,
            parse_mode='Markdown'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        target_user = get_user(target_user_id)
        target_user_name = target_user.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        save_user_message(user_id, "Admin", f"–û—Ç–≤–µ—Ç –¥–ª—è {target_user_name}: {reply_text}", "admin_reply")
        
        # –ü–æ–º–µ—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ
        if original_message_id:
            update_message_status(original_message_id, 'replied', reply_text)
        
        # üî• –û–ë–ù–û–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = get_unread_messages()
        
        if not messages:
            await update.message.reply_text(
                "‚úÖ *–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!*\n\n"
                "üì≠ *–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–≤–µ—á–µ–Ω—ã!* üéâ",
                parse_mode='Markdown',
                reply_markup=admin_keyboard()
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            keyboard = []
            for i, msg in enumerate(messages[:10]):
                user_name = msg['full_user_name'] or msg['user_name'] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                button_text = f"üíå {user_name[:12]}..." if len(user_name) > 12 else f"üíå {user_name}"
                
                keyboard.append([InlineKeyboardButton(
                    button_text, 
                    callback_data=f"quick_reply_{msg['user_id']}_{msg['id']}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="show_all_messages")])
            keyboard.append([InlineKeyboardButton("üìã –í—Å—è –∏—Å—Ç–æ—Ä–∏—è", callback_data="show_full_history")])
            
            await update.message.reply_text(
                f"‚úÖ *–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!*\n\n"
                f"üì® *–û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}*",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}",
            reply_markup=admin_keyboard()
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    return MAIN_MENU

# üî• –î–û–ë–ê–í–ò–ú –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
async def handle_show_all_messages_custom(update: Update, context: ContextTypes.DEFAULT_TYPE, messages=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞)"""
    if messages is None:
        messages = get_unread_messages()
    
    if not messages:
        text = "üì≠ *–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–≤–µ—á–µ–Ω—ã! üéâ"
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text(text, parse_mode='Markdown')
        else:
            await update.edit_message_text(text, parse_mode='Markdown')
        return
    
    # –°–æ–∑–¥–∞–µ–º —É–¥–æ–±–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    keyboard = []
    for i, msg in enumerate(messages[:10]):
        user_name = msg['full_user_name'] or msg['user_name'] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        button_text = f"üíå {user_name[:12]}..." if len(user_name) > 12 else f"üíå {user_name}"
        
        keyboard.append([InlineKeyboardButton(
            button_text, 
            callback_data=f"quick_reply_{msg['user_id']}_{msg['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="show_all_messages")])
    keyboard.append([InlineKeyboardButton("üìã –í—Å—è –∏—Å—Ç–æ—Ä–∏—è", callback_data="show_full_history")])
    
    text = f"üì® *–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(messages)}*\n\n"
    text += "*–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:*\n"
    text += "üí° *–°–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞*\n\n"
    
    for i, msg in enumerate(messages[:5]):
        user_name = msg['full_user_name'] or msg['user_name'] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        text += f"üë§ *{user_name}* (ID: `{msg['user_id']}`)\n"
        text += f"üí¨ {msg['message_text'][:80]}...\n"
        text += f"‚è∞ {msg['created_at'].strftime('%d.%m %H:%M')}\n\n"
    
    if len(messages) > 5:
        text += f"*... –∏ –µ—â—ë {len(messages) - 5} —Å–æ–æ–±—â–µ–Ω–∏–π*"
    
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text(text, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.edit_message_text(text, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_messages_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–¥–æ–±–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    # üî• –í–°–ï–ì–î–ê –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    messages = get_unread_messages()
    
    if not messages:
        await update.message.reply_text(
            "üì≠ *–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n"
            "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–≤–µ—á–µ–Ω—ã! üéâ\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /history —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é.",
            parse_mode='Markdown'
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º —É–¥–æ–±–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    keyboard = []
    for i, msg in enumerate(messages[:10]):
        user_name = msg['full_user_name'] or msg['user_name'] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        button_text = f"üíå {user_name[:12]}..." if len(user_name) > 12 else f"üíå {user_name}"
        
        keyboard.append([InlineKeyboardButton(
            button_text, 
            callback_data=f"quick_reply_{msg['user_id']}_{msg['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="show_all_messages")])
    keyboard.append([InlineKeyboardButton("üìã –í—Å—è –∏—Å—Ç–æ—Ä–∏—è", callback_data="show_full_history")])
    
    text = f"üì® *–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(messages)}*\n\n"
    text += "*–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:*\n"
    text += "üí° *–°–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞*\n\n"
    
    for i, msg in enumerate(messages[:5]):
        user_name = msg['full_user_name'] or msg['user_name'] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        text += f"üë§ *{user_name}* (ID: `{msg['user_id']}`)\n"
        text += f"üí¨ {msg['message_text'][:80]}...\n"
        text += f"‚è∞ {msg['created_at'].strftime('%d.%m %H:%M')}\n\n"
    
    if len(messages) > 5:
        text += f"*... –∏ –µ—â—ë {len(messages) - 5} —Å–æ–æ–±—â–µ–Ω–∏–π*"
    
    await update.message.reply_text(
        text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_messages_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∏ –Ω–æ–≤—ã—Ö)"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ db.py
    try:
        from db import get_db_connection
        conn = get_db_connection()
        with conn.cursor() as cur:
            cur.execute("""
                SELECT um.*, u.name as full_user_name 
                FROM user_messages um
                LEFT JOIN users u ON um.user_id = u.user_id
                ORDER BY um.created_at DESC
                LIMIT 20
            """)
            all_messages = cur.fetchall()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏")
        return
    
    if not all_messages:
        await update.message.reply_text("üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏")
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –∏ –Ω–æ–≤—ã–µ
    new_messages = [msg for msg in all_messages if msg['status'] == 'new']
    replied_messages = [msg for msg in all_messages if msg['status'] == 'replied']
    
    text = f"üì® *–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n"
    text += f"üÜï *–ù–æ–≤—ã–µ:* {len(new_messages)}\n"
    text += f"‚úÖ *–û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ:* {len(replied_messages)}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
    for i, msg in enumerate(all_messages[:5]):
        user_name = msg['full_user_name'] or msg['user_name'] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        status_emoji = "üÜï" if msg['status'] == 'new' else "‚úÖ"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        created_at = msg['created_at']
        if hasattr(created_at, 'strftime'):
            created_at_str = created_at.strftime('%d.%m %H:%M')
        else:
            created_at_str = str(created_at)
        
        text += f"{status_emoji} *{user_name}* (ID: `{msg['user_id']}`)\n"
        text += f"üí¨ {msg['message_text'][:80]}...\n"
        text += f"‚è∞ {created_at_str}\n"
        
        if msg['status'] == 'replied' and msg['admin_reply']:
            text += f"üì® –û—Ç–≤–µ—Ç: {msg['admin_reply'][:50]}...\n"
        
        text += "\n"
    
    if len(all_messages) > 5:
        text += f"*... –∏ –µ—â—ë {len(all_messages) - 5} —Å–æ–æ–±—â–µ–Ω–∏–π*"
    
    keyboard = [
        [InlineKeyboardButton("üìã –í—Å—è –∏—Å—Ç–æ—Ä–∏—è", callback_data="show_full_history")]
    ]
    
    await update.message.reply_text(
        text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_user_id_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("üåë –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=main_menu_keyboard())
        return MAIN_MENU
    
    try:
        target_user_id = int(update.message.text)
        from db import add_readings_to_user, get_user
        
        user = get_user(target_user_id)
        if not user:
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=admin_keyboard()
            )
            return MAIN_MENU
        
        # –î–æ–±–∞–≤–ª—è–µ–º 1 —Ä–∞—Å–∫–ª–∞–¥
        add_readings_to_user(target_user_id, 1)
        
        user_name = user.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        new_balance = user['readings_balance'] + 1
        
        await update.message.reply_text(
            f"‚úÖ *–£—Å–ø–µ—à–Ω–æ!*\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {target_user_id})\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ: 1 —Ä–∞—Å–∫–ª–∞–¥\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}",
            parse_mode='Markdown',
            reply_markup=admin_keyboard()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await context.bot.send_message(
                chat_id=target_user_id,
                text="üéÅ *–¢—ã –ø–æ–ª—É—á–∏–ª –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –ó–µ—Ä–∫–∞–ª–∞ –°—É–¥–µ–±!*\n\n"
                     "–í –∑–Ω–∞–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∑–∞ —Ç–≤–æ—é –≤–µ—Ä–Ω–æ—Å—Ç—å –º—ã –¥–∞—Ä–∏–º —Ç–µ–±–µ +1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥! üîÆ\n\n"
                     "–ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞!",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=admin_keyboard()
        )
    
    return MAIN_MENU

async def send_bonus_notification_to_all(context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    from db import get_all_users
    
    users = get_all_users()
    sent_count = 0
    
    broadcast_text = """üéÅ *–ü–û–î–ê–†–û–ö –û–¢ –ó–ï–†–ö–ê–õ–ê –°–£–î–ï–ë!* üîÆ

–î–æ—Ä–æ–≥–æ–π –∏—Å–∫–∞—Ç–µ–ª—å –∏—Å—Ç–∏–Ω—ã!

–í –∑–Ω–∞–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∑–∞ —Ç–≤–æ—é –≤–µ—Ä–Ω–æ—Å—Ç—å –∏ –≤ —á–µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞, 
–º—ã –¥–∞—Ä–∏–º —Ç–µ–±–µ *+1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥*! 

‚ú® –ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞ –∏ –∑–∞–≥–ª—è–Ω–∏ –≤ –±—É–¥—É—â–µ–µ!

*–¢–≤–æ–π –±–∞–ª–∞–Ω—Å —É–∂–µ –ø–æ–ø–æ–ª–Ω–µ–Ω!*

üåô –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∫ –ó–µ—Ä–∫–∞–ª—É –°—É–¥–µ–±!"""
    
    for user in users:
        try:
            await context.bot.send_message(
                chat_id=user['user_id'],
                text=broadcast_text,
                parse_mode='Markdown'
            )
            sent_count += 1
            await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–Ω—É—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
    
    logger.info(f"–ë–æ–Ω—É—Å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {sent_count}/{len(users)}")

async def handle_quick_reply_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await query.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    parts = query.data.replace('quick_reply_', '').split('_')
    target_user_id = int(parts[0])
    original_message_id = int(parts[1]) if len(parts) > 1 else None
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞
    context.user_data.clear()
    context.user_data['admin_reply_mode'] = True
    context.user_data['reply_to_user'] = target_user_id
    context.user_data['original_message_id'] = original_message_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    target_user = get_user(target_user_id)
    target_user_name = target_user.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    original_message_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    if original_message_id:
        user_messages = get_user_messages(target_user_id)
        for msg in user_messages:
            if msg['id'] == original_message_id:
                original_message_text = msg['message_text']
                break
    
    context.user_data['original_message_text'] = original_message_text
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = ReplyKeyboardMarkup([['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç']], resize_keyboard=True)
    
    # üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º context.bot.send_message –≤–º–µ—Å—Ç–æ query.message.reply_text
    await context.bot.send_message(
        chat_id=user_id,
        text=f"üíå *–†–ï–ñ–ò–ú –û–¢–í–ï–¢–ê –ê–î–ú–ò–ù–ê*\n\n"
             f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {target_user_name}\n"
             f"üÜî *ID:* {target_user_id}\n\n"
             f"*–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n{original_message_text}\n\n"
             f"üëá *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ:*\n\n"
             f"‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç'",
        parse_mode='Markdown',
        reply_markup=cancel_keyboard
    )
    
    # üî• –í–û–ó–í–†–ê–©–ê–ï–ú —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞
    return AWAITING_ADMIN_REPLY

async def handle_admin_reply_direct(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∞"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞
    if context.user_data.get('admin_reply_mode'):
        return await handle_admin_reply_input(update, context)
    else:
        # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞, –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ConversationHandler
        return

async def handle_show_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        return
    
    # üî• –í–°–ï–ì–î–ê –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    messages = get_unread_messages()
    
    if not messages:
        try:
            await query.edit_message_text(
                "üì≠ *–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n"
                "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–≤–µ—á–µ–Ω—ã! üéâ\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìã –í—Å—è –∏—Å—Ç–æ—Ä–∏—è", callback_data="show_full_history")],
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="show_all_messages")]
                ])
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(
                "üì≠ *–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–≤–µ—á–µ–Ω—ã! üéâ",
                parse_mode='Markdown'
            )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    text = f"üì® *–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(messages)}*\n\n"
    text += "üí° *–°–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞*\n\n"
    
    for i, msg in enumerate(messages[:5]):
        user_name = msg['full_user_name'] or msg['user_name'] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        text += f"*{i+1}. {user_name}* (ID: `{msg['user_id']}`)\n"
        text += f"üí¨ {msg['message_text'][:150]}...\n"
        text += f"‚è∞ {msg['created_at'].strftime('%d.%m %H:%M')}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    keyboard = []
    for i, msg in enumerate(messages[:5]):
        user_name = msg['full_user_name'] or msg['user_name'] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        keyboard.append([InlineKeyboardButton(
            f"üíå –û—Ç–≤–µ—Ç–∏—Ç—å {user_name[:15]}...", 
            callback_data=f"quick_reply_{msg['user_id']}_{msg['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="show_all_messages")])
    keyboard.append([InlineKeyboardButton("üìã –í—Å—è –∏—Å—Ç–æ—Ä–∏—è", callback_data="show_full_history")])
    
    try:
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def handle_show_full_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        return
    
    # üî• –í–°–ï–ì–î–ê –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    try:
        from db import get_db_connection
        conn = get_db_connection()
        with conn.cursor() as cur:
            cur.execute("""
                SELECT um.*, u.name as full_user_name 
                FROM user_messages um
                LEFT JOIN users u ON um.user_id = u.user_id
                ORDER BY um.created_at DESC
                LIMIT 50
            """)
            all_messages = cur.fetchall()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
        return
    
    if not all_messages:
        try:
            await query.edit_message_text(
                "üì≠ *–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏*\n\n"
                "–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="show_full_history")]
                ])
            )
        except Exception:
            await query.message.reply_text("üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏")
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –∏ –Ω–æ–≤—ã–µ
    new_messages = [msg for msg in all_messages if msg['status'] == 'new']
    replied_messages = [msg for msg in all_messages if msg['status'] == 'replied']
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"üì® *–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n"
    text += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
    text += f"‚Ä¢ üÜï –ù–æ–≤—ã–µ: {len(new_messages)}\n"
    text += f"‚Ä¢ ‚úÖ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ: {len(replied_messages)}\n"
    text += f"‚Ä¢ üìã –í—Å–µ–≥–æ: {len(all_messages)}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—è–º–∏
    for i, msg in enumerate(all_messages[:10]):
        user_name = msg['full_user_name'] or msg['user_name'] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        status_emoji = "üÜï" if msg['status'] == 'new' else "‚úÖ"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        created_at = msg['created_at']
        if hasattr(created_at, 'strftime'):
            created_at_str = created_at.strftime('%d.%m.%Y %H:%M')
        else:
            created_at_str = str(created_at)
        
        text += f"{status_emoji} *{i+1}. {user_name}* (ID: `{msg['user_id']}`)\n"
        text += f"üìÖ *–ö–æ–≥–¥–∞:* {created_at_str}\n"
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_preview = msg['message_text']
        if len(message_preview) > 100:
            message_preview = message_preview[:100] + "..."
        text += f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* {message_preview}\n"
        
        if msg['status'] == 'replied' and msg['admin_reply']:
            reply_preview = msg['admin_reply']
            if len(reply_preview) > 50:
                reply_preview = reply_preview[:50] + "..."
            text += f"üì® *–û—Ç–≤–µ—Ç:* {reply_preview}\n"
        
        text += "\n"
    
    if len(all_messages) > 10:
        text += f"*... –∏ –µ—â—ë {len(all_messages) - 10} —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n"
    
    text += "üí° *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:*"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if new_messages:
        keyboard.append([InlineKeyboardButton("üöÄ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–æ–≤—ã–µ", callback_data="show_all_messages")])
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="show_full_history"),
        InlineKeyboardButton("üìã –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ", callback_data="show_all_messages")
    ])
    
    try:
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def handle_admin_back_to_menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    await update.message.reply_text(
        "üåë –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
        reply_markup=main_menu_keyboard()
    )

async def handle_get_by_referral(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞
    await invite_friend(update, context)

async def main_menu_fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–æ–ª–±—ç–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = update.message.from_user.id
    user_input = update.message.text
    
    # üî• –í–ê–ñ–ù–û: –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    if user_id in ADMIN_USER_IDS and context.user_data.get('admin_reply_mode'):
        # –ü–æ–∑–≤–æ–ª—è–µ–º ConversationHandler –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return await handle_admin_reply_input(update, context)
    
    user = get_user(user_id)
    user_name = user['name'] if user['name'] else "–ò—Å–∫–∞—Ç–µ–ª—å"
    
    # üî• –ü–ï–†–í–´–ú –î–ï–õ–û–ú –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if user_id in ADMIN_USER_IDS:
        if user_input in ['üéÅ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã –í–°–ï–ú', 'üë§ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', 
                         'üîÑ –û–±–Ω—É–ª–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö', 'üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 
                         'üì® –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']:
            return await admin_main_menu(update, context)
    
    # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_input == '‚≠ê –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        await show_profile(update, context)
        return MAIN_MENU
    elif user_input == 'üìú –û –±–æ—Ç–µ':
        await about_command(update, context)
        return MAIN_MENU
    elif user_input == 'üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è':
        await card_of_day(update, context)
        return MAIN_MENU
    elif user_input == 'üîÆ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥':
        await update.message.reply_text(
            TEXTS['reading_types'],
            parse_mode='Markdown',
            reply_markup=reading_type_keyboard()
        )
        return AWAITING_READING_TYPE
    elif user_input == 'ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞':
        await invite_friend(update, context)
        return MAIN_MENU
    elif user_input == 'üõçÔ∏è –ö—É–ø–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã':
        await buy_readings(update, context)
        return MAIN_MENU
    elif user_input == 'üìú –ú–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã':
        await show_reading_history(update, context)
        return MAIN_MENU
    elif user_input == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await update.message.reply_text(
            "üåë –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –ó–∞–ª –ó–µ—Ä–∫–∞–ª...",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
    elif user_input == 'üìû –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
        await update.message.reply_text(
            "üìù *–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
            "‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n"
            "‚Ä¢ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ\n"
            "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardMarkup([['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard=True)
        )
        return AWAITING_FEEDBACK
    else:
        await update.message.reply_text(
            TEXTS['unknown_command'],
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

async def admin_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    user_id = update.effective_user.id
    user_input = update.message.text
    
    logger.info(f"üîß –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é: {user_input} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("üåë –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=main_menu_keyboard())
        return MAIN_MENU
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
    if user_input == 'üéÅ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã –í–°–ï–ú':
        add_readings_to_all_users(1)
        users_count = len(get_all_users())
        await update.message.reply_text(
            f"‚úÖ *–£—Å–ø–µ—à–Ω–æ!*\n\n–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ 1 —Ä–∞—Å–∫–ª–∞–¥—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}",
            parse_mode='Markdown',
            reply_markup=admin_keyboard()
        )
        return MAIN_MENU  # üî• –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
    elif user_input == 'üë§ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é':
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=ReplyKeyboardRemove())
        return AWAITING_USER_ID  # üî• –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
    elif user_input == 'üîÑ –û–±–Ω—É–ª–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö':
        reset_free_readings_counter()
        await update.message.reply_text("‚úÖ –°—á—ë—Ç—á–∏–∫–∏ –æ–±–Ω—É–ª–µ–Ω—ã!", reply_markup=admin_keyboard())
        return MAIN_MENU  # üî• –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
    elif user_input == 'üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
        await handle_update_broadcast(update, context)
        return MAIN_MENU  # üî• –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
    elif user_input == 'üì® –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è':
        await handle_messages_list(update, context)
        return MAIN_MENU  # üî• –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
    elif user_input == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=main_menu_keyboard())
        return MAIN_MENU  # üî• –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
    await update.message.reply_text(
        "üåë –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.",
        reply_markup=admin_keyboard()
    )
    return MAIN_MENU


# --- üèÅ –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
def main():
    init_db()
    application = Application.builder().token(TOKEN).build()

    # 1. –°–Ω–∞—á–∞–ª–∞ ConversationHandler - –û–°–ù–û–í–ù–û–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_fallback)],
            AWAITING_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_question)],
            AWAITING_READING_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reading_type_selection)],
            AWAITING_USER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_id_input)],
            AWAITING_FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_feedback)],
            AWAITING_ADMIN_REPLY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_reply_input)],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(filters.TEXT & ~filters.COMMAND, global_fallback_handler)
        ],
        allow_reentry=True
    )

    application.add_handler(conv_handler)
    
    # 2. –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    application.add_handler(PreCheckoutQueryHandler(pre_checkout_handler))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
    
    # 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏
    application.add_handler(MessageHandler(filters.Regex('^üõçÔ∏è –ö—É–ø–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã$'), buy_readings))
    application.add_handler(CallbackQueryHandler(button_buy_pack, pattern="^buy_pack_"))
    
    # 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–¥–±–µ–∫–∞
    application.add_handler(CallbackQueryHandler(handle_feedback_button, pattern="^feedback_(yes|no)_"))
    
    # 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    application.add_handler(CallbackQueryHandler(show_full_reading, pattern="^full_reading_"))
    
    # 6. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    application.add_handler(CallbackQueryHandler(menu_invite_friend, pattern="^menu_invite_friend$"))
    application.add_handler(CallbackQueryHandler(handle_get_by_referral, pattern="^get_by_referral$"))
    
    # 7. üî• –ê–î–ú–ò–ù–°–ö–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò - –ü–û–°–õ–ï–î–ù–ò–ú–ò
    application.add_handler(CommandHandler('admin', admin_command))
    application.add_handler(CommandHandler("messages", handle_messages_list))
    application.add_handler(CommandHandler("history", handle_messages_history))
    application.add_handler(CommandHandler("update_broadcast", handle_update_broadcast))
    
    # 8. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback-–∫–Ω–æ–ø–æ–∫ (—Å–æ–æ–±—â–µ–Ω–∏—è)
    application.add_handler(CallbackQueryHandler(handle_quick_reply_button, pattern="^quick_reply_"))
    application.add_handler(CallbackQueryHandler(handle_show_all_messages, pattern="^show_all_messages$"))
    application.add_handler(CallbackQueryHandler(handle_show_full_history, pattern="^show_full_history$"))
    application.add_handler(CallbackQueryHandler(handle_admin_back_to_menu_cmd, pattern="^admin_back_to_menu$"))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()