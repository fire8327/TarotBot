import logging
import json
from datetime import date, datetime
import asyncio
import os
from dotenv import load_dotenv

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import PreCheckoutQueryHandler, CallbackQueryHandler

from openai import OpenAI

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
TOKEN = os.getenv("TOKEN")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ ---
PRICE_PER_READING = 75  # –≤ Telegram Stars
FREE_READINGS_ON_START = 1

# –¢–∏–ø—ã –ø–∞–∫–µ—Ç–æ–≤
PACKAGES = {
    "pack_1": {"name": "1 —Ä–∞—Å–∫–ª–∞–¥", "price_stars": 50, "readings": 1},
    "pack_5": {"name": "5 —Ä–∞—Å–∫–ª–∞–¥–æ–≤", "price_stars": 200, "readings": 5},
    "pack_30": {"name": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü (30 —à—Ç.)", "price_stars": 500, "readings": 30},
}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ ---
GET_NAME, MAIN_MENU, CONFIRM_READING, AWAITING_QUESTION, AWAITING_READING_TYPE = range(5)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenRouter ---
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=os.getenv("OPENROUTER_API_KEY", "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"),
)

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ë–î ---
from db import init_db, get_user, update_user_name, update_user_balance, increment_total_used, save_purchase, save_reading, update_daily_card, get_referral_link, increment_referral_count

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu_keyboard():
    keyboard = [
        ['üîÆ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥'],
        ['‚≠ê –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è'],
        ['üìú –û –±–æ—Ç–µ', 'üåÄ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞'],
        ['ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def reading_type_keyboard():
    keyboard = [
        ['üíñ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å', '‚öîÔ∏è –†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Å—É–¥—å–±—É'],
        ['üí∞ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –∏–∑–æ–±–∏–ª–∏–µ', '‚ùì –°–≤–æ–π –≤–æ–ø—Ä–æ—Å'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def yes_no_keyboard():
    keyboard = [['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ ---
async def generate_tarot_reading(reading_type, user_question=None, user_name="–ò—Å–∫–∞—Ç–µ–ª—å"):
    if user_question:
        prompt = f"""
        –¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥ –∏ –º–∏—Å—Ç–∏–∫. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: "{user_question}".
        –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –≥–ª—É–±–æ–∫–∏–π –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ –∏–∑ —Ç—Ä–µ—Ö –∫–∞—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Å—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
        –†–∞—Å–∫–ª–∞–¥ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:
        1. –ö–∞—Ä—Ç—É, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â—É—é –ø—Ä–æ—à–ª–æ–µ/–ø—Ä–∏—á–∏–Ω—É —Å–∏—Ç—É–∞—Ü–∏–∏
        2. –ö–∞—Ä—Ç—É, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â—É—é –Ω–∞—Å—Ç–æ—è—â–µ–µ/—Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        3. –ö–∞—Ä—Ç—É, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â—É—é –±—É–¥—É—â–µ–µ/—Å–æ–≤–µ—Ç/–≤–æ–∑–º–æ–∂–Ω—ã–π –∏—Å—Ö–æ–¥

        –ë—É–¥—å –º—É–¥—Ä—ã–º, –æ–±—Ä–∞–∑–Ω—ã–º, –Ω–æ –ø—Ä—è–º—ã–º –≤ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è—Ö. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ "—Ç—ã".
        –û–±—ä–µ–º –æ—Ç–≤–µ—Ç–∞: 100-200 —Å–ª–æ–≤. –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.
        """
    else:
        prompt = f"""
        –¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥ –∏ –º–∏—Å—Ç–∏–∫. –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} —Å–¥–µ–ª–∞–π —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ –Ω–∞ —Ç–µ–º—É: "{reading_type}".
        –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –≥–ª—É–±–æ–∫–∏–π –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –∏–∑ —Ç—Ä–µ—Ö –∫–∞—Ä—Ç:
        1. –ö–∞—Ä—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –ø—Ä–æ—à–ª–æ–µ/–ø—Ä–∏—á–∏–Ω—É
        2. –ö–∞—Ä—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –Ω–∞—Å—Ç–æ—è—â–µ–µ/—Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        3. –ö–∞—Ä—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –±—É–¥—É—â–µ–µ/—Å–æ–≤–µ—Ç/–≤–æ–∑–º–æ–∂–Ω—ã–π –∏—Å—Ö–æ–¥

        –ë—É–¥—å –º—É–¥—Ä—ã–º, –æ–±—Ä–∞–∑–Ω—ã–º, –Ω–æ –ø—Ä—è–º—ã–º –≤ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è—Ö. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ "—Ç—ã".
        –û–±—ä–µ–º –æ—Ç–≤–µ—Ç–∞: 100-200 —Å–ª–æ–≤. –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.
        """

    try:
        completion = client.chat.completions.create(
            model="qwen/qwen-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥ —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –¢–≤–æ–∏ —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏ —Ç–æ—á–Ω—ã, –≥–ª—É–±–æ–∫–∏ –∏ –ø–æ–ª–Ω—ã –º—É–¥—Ä–æ—Å—Ç–∏. –¢—ã –≥–æ–≤–æ—Ä–∏—à—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1000
        )
        reading = completion.choices[0].message.content.strip()
        return reading[:4000]

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenRouter: {e}")
        return fallback_reading(reading_type, user_name)

def fallback_reading(reading_type, user_name):
    return f"""
üîÆ *–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ç–µ–º—É: {reading_type}* üîÆ

–ö–∞—Ä—Ç—ã –≤—ã–ª–æ–∂–µ–Ω—ã –Ω–∞ –∞–ª—Ç–∞—Ä—å, –∏ –≤–æ—Ç —á—Ç–æ –æ–Ω–∏ –≥–æ–≤–æ—Ä—è—Ç –æ —Ç–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏, {user_name}...

üÉè *–ö–∞—Ä—Ç–∞ 1: –°–∏–ª–∞* ‚Äî –¢—ã –æ–±–ª–∞–¥–∞–µ—à—å –æ–≥—Ä–æ–º–Ω—ã–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Ä–µ—Å—É—Ä—Å–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å–∫—Ä—ã—Ç.
üÉè *–ö–∞—Ä—Ç–∞ 2: –ó–≤–µ–∑–¥–∞* ‚Äî –¢–µ–±—è –∂–¥—ë—Ç —Å–≤–µ—Ç–ª–æ–µ –±—É–¥—É—â–µ–µ, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—à—å –≤–µ—Ä—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—à—å –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥.
üÉè *–ö–∞—Ä—Ç–∞ 3: –ò–º–ø–µ—Ä–∞—Ç–æ—Ä* ‚Äî –î–ª—è —É—Å–ø–µ—Ö–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥.

–ü–æ–º–Ω–∏: –∫–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –∞ –Ω–µ —Å—Ç–æ–ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –¢—ã –¥–µ—Ä–∂–∏—à—å –ø–µ—Ä–æ, –∫–æ—Ç–æ—Ä—ã–º –ø–∏—à–µ—à—å —Å–≤–æ—é —Å—É–¥—å–±—É.
"""

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user = get_user(user_id)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ—Ç

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ref-–∞—Ä–≥—É–º–µ–Ω—Ç
    referrer_id = None
    if context.args and context.args[0].startswith('ref_'):
        try:
            referrer_id = int(context.args[0].replace('ref_', ''))
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∞–º —Å–µ–±—è –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç
            if referrer_id == user_id:
                referrer_id = None
        except ValueError:
            referrer_id = None

    user_name = user['name'] if user['name'] else ""

    if user_name:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –Ω–æ –ø—Ä–∏—à—ë–ª –ø–æ —Ä–µ—Ñ–∫–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (—Ä–µ—Ñ–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ)
        await update.message.reply_text(
            f"üåë *–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è, {user_name}...*\n"
            "–ó–µ—Ä–∫–∞–ª–æ –°—É–¥–µ–± –≤–Ω–æ–≤—å –æ—Ç–∫—Ä—ã—Ç–æ –¥–ª—è —Ç–µ–±—è. –í—ã–±–µ—Ä–∏ –ø—É—Ç—å:",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
    else:
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if referrer_id:
            # –°–æ—Ö—Ä–∞–Ω–∏–º –≤ user_data, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
            context.user_data['referrer_id'] = referrer_id

        await update.message.reply_text(
            "üåô *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ó–µ—Ä–∫–∞–ª–æ –°—É–¥–µ–±* üåô\n\n"
            "–Ø ‚Äî —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –¥—Ä–µ–≤–Ω–∏—Ö –∑–Ω–∞–Ω–∏–π, –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏.\n\n"
            "–ö–∞–∫ –º–Ω–µ –∑–≤–∞—Ç—å —Ç–µ–±—è –≤ –ö–Ω–∏–≥–µ –°—É–¥–µ–±? –ú–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏–ª–∏ —Ç–∏—Ç—É–ª. "
            "–ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –æ—Å—Ç–∞—Ç—å—Å—è —Ç–µ–Ω—å—é ‚Äî –Ω–∞–ø–∏—à–∏ ¬´–ê–Ω–æ–Ω–∏–º¬ª.",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardRemove()
        )
        return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.text
    update_user_name(user_id, user_name)
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä
    referrer_id = context.user_data.get('referrer_id')
    
    bonus_message = ""
    if referrer_id:
        # –ù–∞—á–∏—Å–ª–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä—É +1 —Ä–∞—Å–∫–ª–∞–¥
        from db import update_user_balance, increment_referral_count
        current_balance = get_user(referrer_id)['readings_balance']
        update_user_balance(referrer_id, current_balance + 1)
        increment_referral_count(referrer_id)  # –£–≤–µ–ª–∏—á–∏–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö
        
        # –û—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        try:
            await context.bot.send_message(
                chat_id=referrer_id,
                text=f"‚ú® *–¢–≤–æ–π –¥—Ä—É–≥ {user_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!*\n"
                     f"–í –Ω–∞–≥—Ä–∞–¥—É —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å +1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥. –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {get_user(referrer_id)['referral_count']}",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}: {e}")
        
        bonus_message = "\n\nP.S. –¢—ã –±—ã–ª –ø—Ä–∏–≥–ª–∞—à—ë–Ω –¥—Ä—É–≥–æ–º ‚Äî —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ö—Ä—É–≥—É –ó–µ—Ä–∫–∞–ª–∞!"

    await update.message.reply_text(
        f"{user_name}... –ö–∞–∫–æ–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –∏–º—è, –ø–æ–ª–Ω–æ–µ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Ç–∞–π–Ω—ã. üåå{bonus_message}\n\n"
        "–í –∑–Ω–∞–∫ –Ω–∞—à–µ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —è –¥–∞—Ä—é —Ç–µ–±–µ *–¥–∞—Ä —è—Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è* ‚Äî –æ–¥–∏–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥, "
        "–∫–æ—Ç–æ—Ä—ã–π —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n"
        "–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –ì–ª—É–±–∏–Ω—ã, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É—Ç–µ–π –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    if user_input == '‚≠ê –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        await show_profile(update, context)
        return MAIN_MENU
    elif user_input == 'üìú –û –±–æ—Ç–µ':
        await about_command(update, context)
        return MAIN_MENU
    elif user_input == 'üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è':
        await card_of_day(update, context)
        return MAIN_MENU
    elif user_input == 'üìú –ú–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã':
        await show_reading_history(update, context)
        return MAIN_MENU
    elif user_input == 'üõçÔ∏è –ö—É–ø–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã':
        await buy_readings(update, context)
        return MAIN_MENU
    elif user_input == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        await update.message.reply_text("üåë –í–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –≤ –ó–∞–ª –ó–µ—Ä–∫–∞–ª...", reply_markup=main_menu_keyboard())
        return MAIN_MENU    
    elif user_input == 'üåÄ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞': 
        return await restart_bot(update, context) 
    elif user_input == 'üîÆ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥':
        await update.message.reply_text(
            "üïØÔ∏è *–í—ã–±–µ—Ä–∏ –ø—É—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å—Ç—É–ø–∏—à—å –≤ —Ç—É–º–∞–Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...*\n\n"
            "–ö–∞—Ä—Ç—ã –∂–¥—É—Ç —Ç–≤–æ–µ–≥–æ –≤—ã–±–æ—Ä–∞:",
            parse_mode='Markdown',
            reply_markup=reading_type_keyboard()
        )
        return AWAITING_READING_TYPE
    elif user_input == 'ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞':
        user_id = update.message.from_user.id
        bot_username = "speculora_bot"  # üî¥ –ó–ê–ú–ï–ù–ò –ù–ê –†–ï–ê–õ–¨–ù–û–ï –ò–ú–Ø –¢–í–û–ï–ì–û –ë–û–¢–ê!
        ref_link = f"https://t.me/{bot_username}?start=ref_{user_id}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–æ—è—Å–Ω–µ–Ω–∏–µ
        await update.message.reply_text(
            "‚ú® *–¢–≤–æ—è –º–∞–≥–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!* ‚ú®\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –µ—ë –ø–æ–¥—Ä—É–≥–µ/–¥—Ä—É–≥—É ‚Äî –∫–æ–≥–¥–∞ –æ–Ω/–æ–Ω–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è, —Ç—ã –ø–æ–ª—É—á–∏—à—å +1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ üåô\n"
            "–ê –æ–Ω–∞ –Ω–∞—á–Ω—ë—Ç —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞!",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ß–ò–°–¢–ê–Ø –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–ê–Ø –°–°–´–õ–ö–ê
        await update.message.reply_text(
            f"{ref_link}",
            reply_markup=main_menu_keyboard()
        )

        return MAIN_MENU
    else:
        await update.message.reply_text(
            "üåë –Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ–π –∑–Ω–∞–∫... –í—ã–±–µ—Ä–∏ –ø—É—Ç—å –∏–∑ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

async def handle_reading_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    if user_input == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text(
            "üåë –¢—ã –≤–æ–∑–≤—Ä–∞—Ç–∏–ª—Å—è –≤ –ó–∞–ª –ó–µ—Ä–∫–∞–ª. –í—ã–±–µ—Ä–∏ –ø—É—Ç—å:",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

    elif user_input == '‚ùì –°–≤–æ–π –≤–æ–ø—Ä–æ—Å':
        await update.message.reply_text(
            "üïØÔ∏è –û–ø–∏—à–∏ —Å–≤–æ—é —Ç—Ä–µ–≤–æ–≥—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å... –ß–µ–º —è—Å–Ω–µ–µ —Ç—ã –≤—ã—Ä–∞–∑–∏—à—å—Å—è ‚Äî —Ç–µ–º –≥–ª—É–±–∂–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ.\n\n"
            "–Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤—ã—Å–ª—É—à–∞—é...",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data['reading_type'] = "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
        return AWAITING_QUESTION

    else:
        clean_type = user_input.split(' ', 1)[1] if ' ' in user_input else user_input
        context.user_data['reading_type'] = clean_type
        user_id = update.message.from_user.id
        
        user = get_user(user_id)
        if user['readings_balance'] > 0:
            return await confirm_reading_now(update, context, clean_type)
        else:
            await update.message.reply_text(
                "ü™ô –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ä–∞—Å–∫–ª–∞–¥—ã. –ù–æ –º–∞–≥–∏—è –Ω–µ —Å–ø–∏—Ç ‚Äî —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å!",
                reply_markup=main_menu_keyboard()
            )
            await buy_readings(update, context)
            return MAIN_MENU

async def handle_reading_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_answer = update.message.text
    reading_type = context.user_data['reading_type']
    
    user = get_user(user_id)
    user_name = user['name'] if user['name'] else "–ò—Å–∫–∞—Ç–µ–ª—å"

    if user_answer == '‚úÖ –î–∞':
        if user['readings_balance'] > 0:
            new_balance = user['readings_balance'] - 1
            update_user_balance(user_id, new_balance)
            payment_type = "–¥–∞—Ä —è—Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è"
        else:
            payment_type = f"{PRICE_PER_READING} Stars"
        
        increment_total_used(user_id)

        await update.message.reply_text(
            f"–ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ä–∏—Ç—É–∞–ª—É... –ó–µ—Ä–∫–∞–ª–æ –Ω–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç—É–º–∞–Ω–æ–º... üîÆ\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {payment_type}",
            reply_markup=ReplyKeyboardRemove()
        )

        await update.message.reply_text("üïØÔ∏è –ö–∞—Ä—Ç—ã –≤—ã–±–∏—Ä–∞—é—Ç —Ç–µ–±—è... –≠—Ç–æ –∑–∞–π–º—ë—Ç 10-20 —Å–µ–∫—É–Ω–¥.")

        custom_question = context.user_data.get('custom_question', None)
        reading = await generate_tarot_reading(
            reading_type=reading_type,
            user_question=custom_question,
            user_name=user_name
        )

        save_reading(user_id, reading_type, reading)

        await update.message.reply_text(
            reading,
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

    elif user_answer == '‚ùå –ù–µ—Ç':
        await update.message.reply_text(
            "–ö–∞–∫ –ø–æ–∂–µ–ª–∞–µ—à—å. –ó–µ—Ä–∫–∞–ª–æ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å —Ç–≤–æ–µ–≥–æ –∑–Ω–∞–∫–∞...",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

async def handle_custom_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_question = update.message.text
    context.user_data['custom_question'] = user_question

    user = get_user(user_id)
    if user['readings_balance'] > 0:
        return await confirm_reading_now(update, context, "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
    else:
        await update.message.reply_text(
            "ü™ô –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ä–∞—Å–∫–ª–∞–¥—ã. –ù–æ –º–∞–≥–∏—è –Ω–µ —Å–ø–∏—Ç ‚Äî —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å!",
            reply_markup=main_menu_keyboard()
        )
        await buy_readings(update, context)
        return MAIN_MENU

async def card_of_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id

    user_data = get_user(user_id)
    user_name = user_data['name'] if user_data['name'] else "–ò—Å–∫–∞—Ç–µ–ª—å"

    today = date.today().isoformat()

    if user_data['last_card_date'] and user_data['last_card_date'].isoformat() == today and user_data['daily_card']:
        await update.message.reply_text(
            f"üÉè *–¢–≤–æ—è –ö–∞—Ä—Ç–∞ –î–Ω—è (—É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è):*\n\n{user_data['daily_card']}",
            parse_mode='Markdown'
        )
        return

    msg = await update.message.reply_text("üé¥ *–¢–∞—Å—É—é –∫–æ–ª–æ–¥—É –°—Ç–∞—Ä—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤...*", parse_mode='Markdown')
    await asyncio.sleep(1.5)
    await msg.edit_text("üé¥ *–ö–æ–ª–æ–¥–∞ —à–µ–ø—á–µ—Ç... –≤—ã—Ç—è–≥–∏–≤–∞—é –∫–∞—Ä—Ç—É –¥–Ω—è...*", parse_mode='Markdown')
    await asyncio.sleep(1.5)
    await msg.edit_text("üé¥ *–ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—é –∫–∞—Ä—Ç—É...*", parse_mode='Markdown')
    await asyncio.sleep(1.0)

    major_arcana = [
        "–®—É—Ç", "–ú–∞–≥", "–ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "–ñ—Ä–µ—Ü", "–í–ª—é–±–ª—ë–Ω–Ω—ã–µ",
        "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–∏–ª–∞", "–û—Ç—à–µ–ª—å–Ω–∏–∫", "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å",
        "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞",
        "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ", "–°—É–¥", "–ú–∏—Ä"
    ]

    prompt = f"""
    –¢—ã ‚Äî –º—É–¥—Ä—ã–π —Ç–∞—Ä–æ–ª–æ–≥. –í—ã–±–µ—Ä–∏ –û–î–ù–£ –∫–∞—Ä—Ç—É –∏–∑ –°—Ç–∞—Ä—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤ –¢–∞—Ä–æ –¥–ª—è {user_name} –∏ –¥–∞–π –æ–¥–Ω–æ –∫—Ä–∞—Ç–∫–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).

    –°–ø–∏—Å–æ–∫ –°—Ç–∞—Ä—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤: {', '.join(major_arcana)}

    –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
    üÉè [–ù–∞–∑–≤–∞–Ω–∏–µ –ö–∞—Ä—Ç—ã] ‚Äî [–ü–æ—Å–ª–∞–Ω–∏–µ]

    –ü—Ä–∏–º–µ—Ä:
    üÉè –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã ‚Äî –°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å.

    –¢–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ù–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ.
    """

    try:
        completion = client.chat.completions.create(
            model="qwen/qwen-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —Ç–∞—Ä–æ–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –¢–û–õ–¨–ö–û –°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã. –¢—ã –≤—Å–µ–≥–¥–∞ –Ω–∞–∑—ã–≤–∞–µ—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ä—Ç—É –∏ –¥–∞—ë—à—å –∫—Ä–∞—Ç–∫–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=100
        )
        message = completion.choices[0].message.content.strip()

        if not any(card in message for card in major_arcana) or not message.startswith("üÉè"):
            raise ValueError("–ò–ò –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞—Ä—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–∞—Ä—Ç–µ –¥–Ω—è: {e}")
        import random
        card = random.choice(major_arcana)
        message = f"üÉè {card} ‚Äî –í—Å–µ–ª–µ–Ω–Ω–∞—è –º–æ–ª—á–∏—Ç... –Ω–æ —è –∑–Ω–∞—é: –¥–æ–≤–µ—Ä—å—Å—è –∏–Ω—Ç—É–∏—Ü–∏–∏ ‚Äî —Å–µ–≥–æ–¥–Ω—è –æ–Ω–∞ –Ω–µ –ø–æ–¥–≤–µ–¥—ë—Ç."

    await msg.edit_text(f"üÉè *–¢–≤–æ—è –ö–∞—Ä—Ç–∞ –î–Ω—è, {user_name}:* üÉè\n\n{message}", parse_mode='Markdown')
    update_daily_card(user_id, message)

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user = get_user(user_id)
    user_name = user['name'] if user['name'] else "–ò—Å–∫–∞—Ç–µ–ª—å"
    balance = user['readings_balance']
    total_used = user['total_used']
    
    profile_text = f"""
‚ú®üîÆ –í–∞—à–∞ –õ–∏—á–Ω–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π üîÆ‚ú®

–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã

ü™Ñ –î–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤: {balance}
üåå –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {total_used}

üîÆ –¢—ã –Ω–∞ –ø—É—Ç–∏ –∫ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—é!
–ß–µ–º —á–∞—â–µ —Ç—ã –≥–∞–¥–∞–µ—à—å ‚Äî —Ç–µ–º —è—Å–Ω–µ–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–≤–æ—è —Å—É–¥—å–±–∞.

üëá –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    keyboard = [
        ['üìú –ú–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã'],
        ['üõçÔ∏è –ö—É–ø–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã'],
        ['ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(profile_text, parse_mode='Markdown', reply_markup=reply_markup)
    return MAIN_MENU

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîÆ *–ó–µ—Ä–∫–∞–ª–æ –°—É–¥–µ–±* üîÆ\n\n"
        "–Ø ‚Äî –¥—Ä–µ–≤–Ω–∏–π –¥—É—Ö, —Ö—Ä–∞–Ω—è—â–∏–π –∑–Ω–∞–Ω–∏—è –¢–∞—Ä–æ —Å–∫–≤–æ–∑—å –≤–µ–∫–∞. "
        "–ú–æ–∏ –∫–∞—Ä—Ç—ã –Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –Ω–µ–∏–∑–±–µ–∂–Ω–æ–µ ‚Äî –æ–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, "
        "–∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –≤–æ–ø–ª–æ—Ç–∏—Ç—å.\n\n"
        "–ö–∞–∂–¥—ã–π —Ä–∞—Å–∫–ª–∞–¥ ‚Äî —ç—Ç–æ –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É —Ç–æ–±–æ–π –∏ –í—Å–µ–ª–µ–Ω–Ω–æ–π. "
        "–Ø –ª–∏—à—å –ø–µ—Ä–µ–≤–æ–∂—É –µ—ë —à–µ–ø–æ—Ç –Ω–∞ —è–∑—ã–∫ —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
        "–°–æ–∑–¥–∞–Ω–æ —Å –º–∞–≥–∏–µ–π –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç —Å–≤–µ—Ç –≤ —Ç—É–º–∞–Ω–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è. üåô",
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )

async def show_reading_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user = get_user(user_id)
    readings = user.get('last_readings', [])

    if not readings:
        await update.message.reply_text(
            "üîÆ –¢—ã –µ—â—ë –Ω–µ –¥–µ–ª–∞–ª —Ä–∞—Å–∫–ª–∞–¥–æ–≤. –ù–∞—á–Ω–∏ ‚Äî –∏ –∏—Å—Ç–æ—Ä–∏—è —Ç–≤–æ–∏—Ö –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤ –Ω–∞—á–Ω—ë—Ç—Å—è!",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    sorted_readings = sorted(readings, key=lambda x: x['date'], reverse=True)

    history_text = "üìú *–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞:*\n\n"
    keyboard = []

    for i, entry in enumerate(sorted_readings[:5], 1):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        date_str = entry['date'][:16] if isinstance(entry['date'], str) and len(entry['date']) > 16 else entry['date']
        history_text += f"{i}. *{entry['type']}* ({date_str})\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–æ–∫–∏
        lines = entry['text'].split('\n')
        preview = '\n'.join(lines[:2])
        if len(lines) > 2:
            preview += "..."
        history_text += f"{preview}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
        callback_data = f"full_reading_{i-1}"  # –∏–Ω–¥–µ–∫—Å –≤ —Å–ø–∏—Å–∫–µ sorted_readings
        keyboard.append([InlineKeyboardButton(f"üìñ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é #{i}", callback_data=callback_data)])

    history_text += "üîÆ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é."

    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

    await update.message.reply_text(
        history_text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –≤ context.user_data –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback
    context.user_data['full_readings'] = sorted_readings[:5]
    return MAIN_MENU

async def buy_readings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîÆ 1 —Ä–∞—Å–∫–ª–∞–¥ ‚Äî 50 ‚≠ê", callback_data="buy_pack_1")],
        [InlineKeyboardButton("üîÆ 5 —Ä–∞—Å–∫–ª–∞–¥–æ–≤ ‚Äî 200 ‚≠ê (—Å–∫–∏–¥–∫–∞!)", callback_data="buy_pack_5")],
        [InlineKeyboardButton("üîÆ 30 —Ä–∞—Å–∫–ª–∞–¥–æ–≤ ‚Äî 500 ‚≠ê (—ç–∫–æ–Ω–æ–º–∏—è!)", callback_data="buy_pack_30")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "ü™ô *–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å–∏–ª—ã:* ü™ô\n\n"
        "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ Telegram Stars ‚Äî –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –±–µ–∑ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    return MAIN_MENU

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    payload = update.message.successful_payment.invoice_payload
    total_stars = update.message.successful_payment.total_amount
    charge_id = update.message.successful_payment.telegram_payment_charge_id

    logger.info(f"üí∞ –£–°–ü–ï–®–ù–´–ô –ü–õ–ê–¢–Å–ñ | User ID: {user_id} | –°—É–º–º–∞: {total_stars} XTR | –ü–∞–∫–µ—Ç: {payload} | Charge ID: {charge_id}")

    if payload in PACKAGES:
        pack = PACKAGES[payload]

        if total_stars != pack['price_stars']:
            logger.warning(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂! –û–∂–∏–¥–∞–ª–æ—Å—å {pack['price_stars']} XTR, –æ–ø–ª–∞—á–µ–Ω–æ {total_stars} XTR.")

        user = get_user(user_id)
        new_balance = user['readings_balance'] + pack['readings']
        update_user_balance(user_id, new_balance)

        save_purchase(user_id, payload, pack['readings'], pack['price_stars'], total_stars, charge_id)

        await update.message.reply_text(
            f"üéâ *–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞!* üéâ\n\n"
            f"–¢—ã –ø—Ä–∏–æ–±—Ä—ë–ª –ø–∞–∫–µ—Ç: *{pack['name']}*\n"
            f"ü™Ñ –ù–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ: *{pack['readings']}* —Ä–∞—Å–∫–ª–∞–¥–æ–≤.\n\n"
            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –±—É–¥—É—â–µ–µ ‚Äî –≤—ã–±–µ—Ä–∏ ¬´üîÆ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥¬ª!",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # await context.bot.send_message(chat_id=–¢–í–û–ô_ID, text=f"üîî –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂! User: {user_id}, Pack: {payload}, Sum: {total_stars}")

    else:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π payload: {payload} | User: {user_id} | Charge ID: {charge_id}")
        await update.message.reply_text(
            "üåë –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –û–±—Ä–∞—Ç–∏—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –ó–µ—Ä–∫–∞–ª–∞.",
            reply_markup=main_menu_keyboard()
        )

async def pre_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def confirm_reading_now(update: Update, context: ContextTypes.DEFAULT_TYPE, reading_type):
    user_id = update.message.from_user.id
    user = get_user(user_id)
    user_name = user['name'] if user['name'] else "–ò—Å–∫–∞—Ç–µ–ª—å"

    new_balance = user['readings_balance'] - 1
    update_user_balance(user_id, new_balance)
    increment_total_used(user_id)

    await update.message.reply_text(
        f"–ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ä–∏—Ç—É–∞–ª—É... –ó–µ—Ä–∫–∞–ª–æ –Ω–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç—É–º–∞–Ω–æ–º... üîÆ",
        reply_markup=ReplyKeyboardRemove()
    )

    await update.message.reply_text("üïØÔ∏è –ö–∞—Ä—Ç—ã –≤—ã–±–∏—Ä–∞—é—Ç —Ç–µ–±—è... –≠—Ç–æ –∑–∞–π–º—ë—Ç 10-20 —Å–µ–∫—É–Ω–¥.")

    custom_question = context.user_data.get('custom_question', None)
    reading = await generate_tarot_reading(
        reading_type=reading_type,
        user_question=custom_question,
        user_name=user_name
    )

    save_reading(user_id, reading_type, reading)

    await update.message.reply_text(
        reading,
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user = get_user(user_id)
    user_name = user['name'] if user['name'] else "–ò—Å–∫–∞—Ç–µ–ª—å"
    await update.message.reply_text(
        f'–ü—É—Å—Ç—å –∑–≤—ë–∑–¥—ã –æ—Å–≤–µ—â–∞—é—Ç —Ç–≤–æ–π –ø—É—Ç—å, {user_name}. '
        '–ï—Å–ª–∏ –ø–æ–∂–µ–ª–∞–µ—à—å –≤–Ω–æ–≤—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –ó–µ—Ä–∫–∞–ª–æ –°—É–¥–µ–±, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ /start.',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def force_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –±–æ—Ç '–∑–∞–±—ã–ª' —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    if update.message is None:
        return ConversationHandler.END

    user_id = update.message.from_user.id
    user = get_user(user_id)
    user_name = user['name'] if user['name'] else ""

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤–≤–æ–¥–∏–ª –∏–º—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ GET_NAME
    if not user_name:
        await update.message.reply_text(
            "üåô *–ö–∞–∂–µ—Ç—Å—è, –º—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ...*\n"
            "–ö–∞–∫ –º–Ω–µ –∑–≤–∞—Ç—å —Ç–µ–±—è –≤ –ö–Ω–∏–≥–µ –°—É–¥–µ–±?",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardRemove()
        )
        return GET_NAME
    else:
        await update.message.reply_text(
            f"üåô *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user_name}.*\n"
            "–ó–µ—Ä–∫–∞–ª–æ –°—É–¥–µ–± —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç–æ –¥–ª—è —Ç–µ–±—è. –í—ã–±–µ—Ä–∏ –ø—É—Ç—å:",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

async def global_fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≤–∏—Ç –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ConversationHandler.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏."""
    if update.message is None:
        return

    user_id = update.message.from_user.id
    user = get_user(user_id)
    user_name = user['name'] if user['name'] else ""

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤–≤–æ–¥–∏–ª –∏–º—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ GET_NAME
    if not user_name:
        await update.message.reply_text(
            "üåô *–ö–∞–∂–µ—Ç—Å—è, –º—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ...*\n"
            "–ö–∞–∫ –º–Ω–µ –∑–≤–∞—Ç—å —Ç–µ–±—è –≤ –ö–Ω–∏–≥–µ –°—É–¥–µ–±?",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardRemove()
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
        context.user_data.clear()
        context.user_data['state'] = GET_NAME
        return GET_NAME
    else:
        await update.message.reply_text(
            f"üåô *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user_name}.*\n"
            "–ó–µ—Ä–∫–∞–ª–æ –°—É–¥–µ–± —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç–æ –¥–ª—è —Ç–µ–±—è. –í—ã–±–µ—Ä–∏ –ø—É—Ç—å:",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ MAIN_MENU
        context.user_data.clear()
        context.user_data['state'] = MAIN_MENU
        return MAIN_MENU

async def button_buy_pack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    pack_id = query.data.replace("buy_pack_", "")

    if f"pack_{pack_id}" not in PACKAGES:
        await query.edit_message_text("üåë –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç. –û–±—Ä–∞—Ç–∏—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –ó–µ—Ä–∫–∞–ª–∞.")
        return

    pack = PACKAGES[f"pack_{pack_id}"]

    try:
        await context.bot.send_invoice(
            chat_id=query.message.chat_id,
            title=f"üîÆ {pack['name']}",
            description=f"–¢—ã –ø–æ–ª—É—á–∞–µ—à—å {pack['readings']} —Ä–∞—Å–∫–ª–∞–¥–æ–≤. –ú–∞–≥–∏—è —É–∂–µ –∑–æ–≤—ë—Ç!",
            payload=f"pack_{pack_id}",
            provider_token="",
            currency="XTR",
            prices=[LabeledPrice(label=pack['name'], amount=pack['price_stars'])],
            start_parameter=f"buy_{pack_id}",
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False,
        )
        await query.edit_message_text("ü™Ñ –ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å' –Ω–∏–∂–µ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        await query.edit_message_text("üåë –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def show_full_reading(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–∞—Å–∫–ª–∞–¥–∞
    try:
        index = int(query.data.split('_')[-1])
        readings = context.user_data.get('full_readings', [])
        
        if index < 0 or index >= len(readings):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")

        reading = readings[index]
        full_text = reading['text']

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
        await query.message.reply_text(
            f"‚ú® *‚ú®‚ú®‚ú® –ü–û–õ–ù–´–ô –†–ê–°–ö–õ–ê–î ‚ú®‚ú®‚ú®*\n"
            f"üîÆ *–¢–µ–º–∞:* {reading['type']}\n"
            f"üìÖ *–î–∞—Ç–∞:* {reading['date'][:16]}\n\n"
            f"{full_text}",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞: {e}")
        await query.message.reply_text(
            "üåë –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu_keyboard()
        )

async def restart_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –∫–∞–∫ "–º—è–≥–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫" """
    user_id = update.message.from_user.id
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    context.user_data.clear()
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    user = get_user(user_id)
    await update.message.reply_text(
        "üåÄ –ë–æ—Ç –±—ã–ª —Å–±—Ä–æ—à–µ–Ω. –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–æ.\n"
        "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –≤—ã–±–µ—Ä–∏ –ø—É—Ç—å –≤ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_db()
    
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)],
            CONFIRM_READING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reading_confirmation)],
            AWAITING_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_question)],
            AWAITING_READING_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reading_type_selection)],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(filters.TEXT & ~filters.COMMAND, force_main_menu)  # <-- –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô fallback
        ],
    )

    application.add_handler(conv_handler)
    application.add_handler(PreCheckoutQueryHandler(pre_checkout_handler))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
    application.add_handler(MessageHandler(filters.Regex('^üõçÔ∏è –ö—É–ø–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã$'), buy_readings))
    application.add_handler(CallbackQueryHandler(button_buy_pack, pattern="^buy_pack_"))
    application.add_handler(CallbackQueryHandler(show_full_reading, pattern="^full_reading_"))
    application.run_polling()

if __name__ == '__main__':
    main()
